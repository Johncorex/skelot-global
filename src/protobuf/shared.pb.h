// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_shared_2eproto__INCLUDED
#define PROTOBUF_shared_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace tibia {
namespace protobuf {
namespace shared {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shared_2eproto();
void protobuf_AssignDesc_shared_2eproto();
void protobuf_ShutdownFile_shared_2eproto();


enum PLAYER_ACTION {
  PLAYER_ACTION_NONE = 0,
  PLAYER_ACTION_LOOK = 1,
  PLAYER_ACTION_USE = 2,
  PLAYER_ACTION_OPEN = 3,
  PLAYER_ACTION_AUTOWALK_HIGHLIGHT = 4
};
bool PLAYER_ACTION_IsValid(int value);
const PLAYER_ACTION PLAYER_ACTION_MIN = PLAYER_ACTION_NONE;
const PLAYER_ACTION PLAYER_ACTION_MAX = PLAYER_ACTION_AUTOWALK_HIGHLIGHT;
const int PLAYER_ACTION_ARRAYSIZE = PLAYER_ACTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_ACTION_descriptor();
inline const ::std::string& PLAYER_ACTION_Name(PLAYER_ACTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_ACTION_descriptor(), value);
}
inline bool PLAYER_ACTION_Parse(
    const ::std::string& name, PLAYER_ACTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_ACTION>(
    PLAYER_ACTION_descriptor(), name, value);
}
enum ITEM_CATEGORY {
  ITEM_CATEGORY_ARMORS = 1,
  ITEM_CATEGORY_AMULETS = 2,
  ITEM_CATEGORY_BOOTS = 3,
  ITEM_CATEGORY_CONTAINERS = 4,
  ITEM_CATEGORY_DECORATION = 5,
  ITEM_CATEGORY_FOOD = 6,
  ITEM_CATEGORY_HELMETS_HATS = 7,
  ITEM_CATEGORY_LEGS = 8,
  ITEM_CATEGORY_OTHERS = 9,
  ITEM_CATEGORY_POTIONS = 10,
  ITEM_CATEGORY_RINGS = 11,
  ITEM_CATEGORY_RUNES = 12,
  ITEM_CATEGORY_SHIELDS = 13,
  ITEM_CATEGORY_TOOLS = 14,
  ITEM_CATEGORY_VALUABLES = 15,
  ITEM_CATEGORY_AMMUNITION = 16,
  ITEM_CATEGORY_AXES = 17,
  ITEM_CATEGORY_CLUBS = 18,
  ITEM_CATEGORY_DISTANCE_WEAPONS = 19,
  ITEM_CATEGORY_SWORDS = 20,
  ITEM_CATEGORY_WANDS_RODS = 21,
  ITEM_CATEGORY_PREMIUM_SCROLLS = 22,
  ITEM_CATEGORY_TIBIA_COINS = 23,
  ITEM_CATEGORY_CREATURE_PRODUCTS = 24
};
bool ITEM_CATEGORY_IsValid(int value);
const ITEM_CATEGORY ITEM_CATEGORY_MIN = ITEM_CATEGORY_ARMORS;
const ITEM_CATEGORY ITEM_CATEGORY_MAX = ITEM_CATEGORY_CREATURE_PRODUCTS;
const int ITEM_CATEGORY_ARRAYSIZE = ITEM_CATEGORY_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_CATEGORY_descriptor();
inline const ::std::string& ITEM_CATEGORY_Name(ITEM_CATEGORY value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_CATEGORY_descriptor(), value);
}
inline bool ITEM_CATEGORY_Parse(
    const ::std::string& name, ITEM_CATEGORY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_CATEGORY>(
    ITEM_CATEGORY_descriptor(), name, value);
}
enum PLAYER_PROFESSION {
  PLAYER_PROFESSION_ANY = -1,
  PLAYER_PROFESSION_NONE = 0,
  PLAYER_PROFESSION_KNIGHT = 1,
  PLAYER_PROFESSION_PALADIN = 2,
  PLAYER_PROFESSION_SORCERER = 3,
  PLAYER_PROFESSION_DRUID = 4,
  PLAYER_PROFESSION_PROMOTED = 10
};
bool PLAYER_PROFESSION_IsValid(int value);
const PLAYER_PROFESSION PLAYER_PROFESSION_MIN = PLAYER_PROFESSION_ANY;
const PLAYER_PROFESSION PLAYER_PROFESSION_MAX = PLAYER_PROFESSION_PROMOTED;
const int PLAYER_PROFESSION_ARRAYSIZE = PLAYER_PROFESSION_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_PROFESSION_descriptor();
inline const ::std::string& PLAYER_PROFESSION_Name(PLAYER_PROFESSION value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_PROFESSION_descriptor(), value);
}
inline bool PLAYER_PROFESSION_Parse(
    const ::std::string& name, PLAYER_PROFESSION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_PROFESSION>(
    PLAYER_PROFESSION_descriptor(), name, value);
}
enum ANIMATION_LOOP_TYPE {
  ANIMATION_LOOP_TYPE_PINGPONG = -1,
  ANIMATION_LOOP_TYPE_INFINITE = 0,
  ANIMATION_LOOP_TYPE_COUNTED = 1
};
bool ANIMATION_LOOP_TYPE_IsValid(int value);
const ANIMATION_LOOP_TYPE ANIMATION_LOOP_TYPE_MIN = ANIMATION_LOOP_TYPE_PINGPONG;
const ANIMATION_LOOP_TYPE ANIMATION_LOOP_TYPE_MAX = ANIMATION_LOOP_TYPE_COUNTED;
const int ANIMATION_LOOP_TYPE_ARRAYSIZE = ANIMATION_LOOP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ANIMATION_LOOP_TYPE_descriptor();
inline const ::std::string& ANIMATION_LOOP_TYPE_Name(ANIMATION_LOOP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ANIMATION_LOOP_TYPE_descriptor(), value);
}
inline bool ANIMATION_LOOP_TYPE_Parse(
    const ::std::string& name, ANIMATION_LOOP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ANIMATION_LOOP_TYPE>(
    ANIMATION_LOOP_TYPE_descriptor(), name, value);
}
enum HOOK_TYPE {
  HOOK_TYPE_SOUTH = 1,
  HOOK_TYPE_EAST = 2
};
bool HOOK_TYPE_IsValid(int value);
const HOOK_TYPE HOOK_TYPE_MIN = HOOK_TYPE_SOUTH;
const HOOK_TYPE HOOK_TYPE_MAX = HOOK_TYPE_EAST;
const int HOOK_TYPE_ARRAYSIZE = HOOK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* HOOK_TYPE_descriptor();
inline const ::std::string& HOOK_TYPE_Name(HOOK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    HOOK_TYPE_descriptor(), value);
}
inline bool HOOK_TYPE_Parse(
    const ::std::string& name, HOOK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HOOK_TYPE>(
    HOOK_TYPE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace shared
}  // namespace protobuf
}  // namespace tibia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tibia::protobuf::shared::PLAYER_ACTION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::shared::PLAYER_ACTION>() {
  return ::tibia::protobuf::shared::PLAYER_ACTION_descriptor();
}
template <> struct is_proto_enum< ::tibia::protobuf::shared::ITEM_CATEGORY> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::shared::ITEM_CATEGORY>() {
  return ::tibia::protobuf::shared::ITEM_CATEGORY_descriptor();
}
template <> struct is_proto_enum< ::tibia::protobuf::shared::PLAYER_PROFESSION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::shared::PLAYER_PROFESSION>() {
  return ::tibia::protobuf::shared::PLAYER_PROFESSION_descriptor();
}
template <> struct is_proto_enum< ::tibia::protobuf::shared::ANIMATION_LOOP_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::shared::ANIMATION_LOOP_TYPE>() {
  return ::tibia::protobuf::shared::ANIMATION_LOOP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::tibia::protobuf::shared::HOOK_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::shared::HOOK_TYPE>() {
  return ::tibia::protobuf::shared::HOOK_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shared_2eproto__INCLUDED
