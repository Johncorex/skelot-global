// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appearances.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "appearances.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tibia {
namespace protobuf {
namespace appearances {

namespace {

const ::google::protobuf::Descriptor* Appearances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Appearances_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpritePhase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpritePhase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpriteAnimation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteAnimation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpriteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Appearance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Appearance_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagBank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagBank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagWriteOnce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagWriteOnce_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagLight_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagHeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagHeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagShift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagShift_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagClothes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagClothes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagDefaultAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagDefaultAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagMarket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagMarket_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagAutomap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagAutomap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagLenshelp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagLenshelp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagChangedToExpire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagChangedToExpire_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFlagCyclopedia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFlagCyclopedia_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialMeaningAppearanceIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialMeaningAppearanceIds_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FIXED_FRAME_GROUP_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_appearances_2eproto() {
  protobuf_AddDesc_appearances_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "appearances.proto");
  GOOGLE_CHECK(file != NULL);
  Appearances_descriptor_ = file->message_type(0);
  static const int Appearances_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, outfit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, missile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, special_meaning_appearance_ids_),
  };
  Appearances_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Appearances_descriptor_,
      Appearances::default_instance_,
      Appearances_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearances, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Appearances));
  SpritePhase_descriptor_ = file->message_type(1);
  static const int SpritePhase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpritePhase, duration_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpritePhase, duration_max_),
  };
  SpritePhase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpritePhase_descriptor_,
      SpritePhase::default_instance_,
      SpritePhase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpritePhase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpritePhase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpritePhase));
  SpriteAnimation_descriptor_ = file->message_type(2);
  static const int SpriteAnimation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, default_start_phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, synchronized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, random_start_phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, loop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, loop_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, sprite_phase_),
  };
  SpriteAnimation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpriteAnimation_descriptor_,
      SpriteAnimation::default_instance_,
      SpriteAnimation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteAnimation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpriteAnimation));
  Box_descriptor_ = file->message_type(3);
  static const int Box_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, height_),
  };
  Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box_descriptor_,
      Box::default_instance_,
      Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box));
  SpriteInfo_descriptor_ = file->message_type(4);
  static const int SpriteInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, pattern_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, pattern_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, pattern_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, sprite_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, bounding_square_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, animation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, is_opaque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, bounding_box_per_direction_),
  };
  SpriteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpriteInfo_descriptor_,
      SpriteInfo::default_instance_,
      SpriteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpriteInfo));
  FrameGroup_descriptor_ = file->message_type(5);
  static const int FrameGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroup, fixed_frame_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroup, sprite_info_),
  };
  FrameGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameGroup_descriptor_,
      FrameGroup::default_instance_,
      FrameGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameGroup));
  Appearance_descriptor_ = file->message_type(6);
  static const int Appearance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, frame_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, name_),
  };
  Appearance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Appearance_descriptor_,
      Appearance::default_instance_,
      Appearance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appearance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Appearance));
  AppearanceFlags_descriptor_ = file->message_type(7);
  static const int AppearanceFlags_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, cumulative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, usable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, forceuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, multiuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, write_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, liquidpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, unpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, unmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, unsight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, avoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, no_movement_animation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, take_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, liquidcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, hang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, hook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, rotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, dont_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, translucent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, lying_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, animate_always_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, automap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, lenshelp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, fullbank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, ignore_look_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, default_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, unwrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, topeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, npcsaledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, changedtoexpire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, corpse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, player_corpse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, cyclopediaitem_),
  };
  AppearanceFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlags_descriptor_,
      AppearanceFlags::default_instance_,
      AppearanceFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlags));
  AppearanceFlagBank_descriptor_ = file->message_type(8);
  static const int AppearanceFlagBank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagBank, waypoints_),
  };
  AppearanceFlagBank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagBank_descriptor_,
      AppearanceFlagBank::default_instance_,
      AppearanceFlagBank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagBank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagBank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagBank));
  AppearanceFlagWrite_descriptor_ = file->message_type(9);
  static const int AppearanceFlagWrite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWrite, max_text_length_),
  };
  AppearanceFlagWrite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagWrite_descriptor_,
      AppearanceFlagWrite::default_instance_,
      AppearanceFlagWrite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWrite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWrite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagWrite));
  AppearanceFlagWriteOnce_descriptor_ = file->message_type(10);
  static const int AppearanceFlagWriteOnce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWriteOnce, max_text_length_once_),
  };
  AppearanceFlagWriteOnce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagWriteOnce_descriptor_,
      AppearanceFlagWriteOnce::default_instance_,
      AppearanceFlagWriteOnce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWriteOnce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagWriteOnce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagWriteOnce));
  AppearanceFlagLight_descriptor_ = file->message_type(11);
  static const int AppearanceFlagLight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLight, brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLight, color_),
  };
  AppearanceFlagLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagLight_descriptor_,
      AppearanceFlagLight::default_instance_,
      AppearanceFlagLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagLight));
  AppearanceFlagHeight_descriptor_ = file->message_type(12);
  static const int AppearanceFlagHeight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHeight, elevation_),
  };
  AppearanceFlagHeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagHeight_descriptor_,
      AppearanceFlagHeight::default_instance_,
      AppearanceFlagHeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagHeight));
  AppearanceFlagShift_descriptor_ = file->message_type(13);
  static const int AppearanceFlagShift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagShift, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagShift, y_),
  };
  AppearanceFlagShift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagShift_descriptor_,
      AppearanceFlagShift::default_instance_,
      AppearanceFlagShift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagShift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagShift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagShift));
  AppearanceFlagClothes_descriptor_ = file->message_type(14);
  static const int AppearanceFlagClothes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagClothes, slot_),
  };
  AppearanceFlagClothes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagClothes_descriptor_,
      AppearanceFlagClothes::default_instance_,
      AppearanceFlagClothes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagClothes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagClothes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagClothes));
  AppearanceFlagDefaultAction_descriptor_ = file->message_type(15);
  static const int AppearanceFlagDefaultAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagDefaultAction, action_),
  };
  AppearanceFlagDefaultAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagDefaultAction_descriptor_,
      AppearanceFlagDefaultAction::default_instance_,
      AppearanceFlagDefaultAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagDefaultAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagDefaultAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagDefaultAction));
  AppearanceFlagMarket_descriptor_ = file->message_type(16);
  static const int AppearanceFlagMarket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, trade_as_object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, show_as_object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, restrict_to_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, minimum_level_),
  };
  AppearanceFlagMarket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagMarket_descriptor_,
      AppearanceFlagMarket::default_instance_,
      AppearanceFlagMarket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagMarket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagMarket));
  AppearanceFlagNPC_descriptor_ = file->message_type(17);
  static const int AppearanceFlagNPC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, buy_price_),
  };
  AppearanceFlagNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagNPC_descriptor_,
      AppearanceFlagNPC::default_instance_,
      AppearanceFlagNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagNPC));
  AppearanceFlagAutomap_descriptor_ = file->message_type(18);
  static const int AppearanceFlagAutomap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagAutomap, color_),
  };
  AppearanceFlagAutomap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagAutomap_descriptor_,
      AppearanceFlagAutomap::default_instance_,
      AppearanceFlagAutomap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagAutomap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagAutomap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagAutomap));
  AppearanceFlagHook_descriptor_ = file->message_type(19);
  static const int AppearanceFlagHook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHook, direction_),
  };
  AppearanceFlagHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagHook_descriptor_,
      AppearanceFlagHook::default_instance_,
      AppearanceFlagHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagHook));
  AppearanceFlagLenshelp_descriptor_ = file->message_type(20);
  static const int AppearanceFlagLenshelp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLenshelp, id_),
  };
  AppearanceFlagLenshelp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagLenshelp_descriptor_,
      AppearanceFlagLenshelp::default_instance_,
      AppearanceFlagLenshelp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLenshelp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagLenshelp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagLenshelp));
  AppearanceFlagChangedToExpire_descriptor_ = file->message_type(21);
  static const int AppearanceFlagChangedToExpire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagChangedToExpire, former_object_typeid_),
  };
  AppearanceFlagChangedToExpire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagChangedToExpire_descriptor_,
      AppearanceFlagChangedToExpire::default_instance_,
      AppearanceFlagChangedToExpire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagChangedToExpire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagChangedToExpire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagChangedToExpire));
  AppearanceFlagCyclopedia_descriptor_ = file->message_type(22);
  static const int AppearanceFlagCyclopedia_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagCyclopedia, cyclopedia_type_),
  };
  AppearanceFlagCyclopedia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFlagCyclopedia_descriptor_,
      AppearanceFlagCyclopedia::default_instance_,
      AppearanceFlagCyclopedia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagCyclopedia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFlagCyclopedia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFlagCyclopedia));
  SpecialMeaningAppearanceIds_descriptor_ = file->message_type(23);
  static const int SpecialMeaningAppearanceIds_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, gold_coin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, platinum_coin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, crystal_coin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, tibia_coin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, stamped_letter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, supply_stash_id_),
  };
  SpecialMeaningAppearanceIds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialMeaningAppearanceIds_descriptor_,
      SpecialMeaningAppearanceIds::default_instance_,
      SpecialMeaningAppearanceIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMeaningAppearanceIds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialMeaningAppearanceIds));
  FIXED_FRAME_GROUP_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_appearances_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Appearances_descriptor_, &Appearances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpritePhase_descriptor_, &SpritePhase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpriteAnimation_descriptor_, &SpriteAnimation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box_descriptor_, &Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpriteInfo_descriptor_, &SpriteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameGroup_descriptor_, &FrameGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Appearance_descriptor_, &Appearance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlags_descriptor_, &AppearanceFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagBank_descriptor_, &AppearanceFlagBank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagWrite_descriptor_, &AppearanceFlagWrite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagWriteOnce_descriptor_, &AppearanceFlagWriteOnce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagLight_descriptor_, &AppearanceFlagLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagHeight_descriptor_, &AppearanceFlagHeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagShift_descriptor_, &AppearanceFlagShift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagClothes_descriptor_, &AppearanceFlagClothes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagDefaultAction_descriptor_, &AppearanceFlagDefaultAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagMarket_descriptor_, &AppearanceFlagMarket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagNPC_descriptor_, &AppearanceFlagNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagAutomap_descriptor_, &AppearanceFlagAutomap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagHook_descriptor_, &AppearanceFlagHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagLenshelp_descriptor_, &AppearanceFlagLenshelp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagChangedToExpire_descriptor_, &AppearanceFlagChangedToExpire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFlagCyclopedia_descriptor_, &AppearanceFlagCyclopedia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialMeaningAppearanceIds_descriptor_, &SpecialMeaningAppearanceIds::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_appearances_2eproto() {
  delete Appearances::default_instance_;
  delete Appearances_reflection_;
  delete SpritePhase::default_instance_;
  delete SpritePhase_reflection_;
  delete SpriteAnimation::default_instance_;
  delete SpriteAnimation_reflection_;
  delete Box::default_instance_;
  delete Box_reflection_;
  delete SpriteInfo::default_instance_;
  delete SpriteInfo_reflection_;
  delete FrameGroup::default_instance_;
  delete FrameGroup_reflection_;
  delete Appearance::default_instance_;
  delete Appearance_reflection_;
  delete AppearanceFlags::default_instance_;
  delete AppearanceFlags_reflection_;
  delete AppearanceFlagBank::default_instance_;
  delete AppearanceFlagBank_reflection_;
  delete AppearanceFlagWrite::default_instance_;
  delete AppearanceFlagWrite_reflection_;
  delete AppearanceFlagWriteOnce::default_instance_;
  delete AppearanceFlagWriteOnce_reflection_;
  delete AppearanceFlagLight::default_instance_;
  delete AppearanceFlagLight_reflection_;
  delete AppearanceFlagHeight::default_instance_;
  delete AppearanceFlagHeight_reflection_;
  delete AppearanceFlagShift::default_instance_;
  delete AppearanceFlagShift_reflection_;
  delete AppearanceFlagClothes::default_instance_;
  delete AppearanceFlagClothes_reflection_;
  delete AppearanceFlagDefaultAction::default_instance_;
  delete AppearanceFlagDefaultAction_reflection_;
  delete AppearanceFlagMarket::default_instance_;
  delete AppearanceFlagMarket_reflection_;
  delete AppearanceFlagNPC::default_instance_;
  delete AppearanceFlagNPC_reflection_;
  delete AppearanceFlagAutomap::default_instance_;
  delete AppearanceFlagAutomap_reflection_;
  delete AppearanceFlagHook::default_instance_;
  delete AppearanceFlagHook_reflection_;
  delete AppearanceFlagLenshelp::default_instance_;
  delete AppearanceFlagLenshelp_reflection_;
  delete AppearanceFlagChangedToExpire::default_instance_;
  delete AppearanceFlagChangedToExpire_reflection_;
  delete AppearanceFlagCyclopedia::default_instance_;
  delete AppearanceFlagCyclopedia_reflection_;
  delete SpecialMeaningAppearanceIds::default_instance_;
  delete SpecialMeaningAppearanceIds_reflection_;
}

void protobuf_AddDesc_appearances_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tibia::protobuf::shared::protobuf_AddDesc_shared_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021appearances.proto\022\032tibia.protobuf.appe"
    "arances\032\014shared.proto\"\317\002\n\013Appearances\0226\n"
    "\006object\030\001 \003(\0132&.tibia.protobuf.appearanc"
    "es.Appearance\0226\n\006outfit\030\002 \003(\0132&.tibia.pr"
    "otobuf.appearances.Appearance\0226\n\006effect\030"
    "\003 \003(\0132&.tibia.protobuf.appearances.Appea"
    "rance\0227\n\007missile\030\004 \003(\0132&.tibia.protobuf."
    "appearances.Appearance\022_\n\036special_meanin"
    "g_appearance_ids\030\005 \001(\01327.tibia.protobuf."
    "appearances.SpecialMeaningAppearanceIds\""
    "9\n\013SpritePhase\022\024\n\014duration_min\030\001 \001(\r\022\024\n\014"
    "duration_max\030\002 \001(\r\"\362\001\n\017SpriteAnimation\022\033"
    "\n\023default_start_phase\030\001 \001(\r\022\024\n\014synchroni"
    "zed\030\002 \001(\010\022\032\n\022random_start_phase\030\003 \001(\010\022=\n"
    "\tloop_type\030\004 \001(\0162*.tibia.protobuf.shared"
    ".ANIMATION_LOOP_TYPE\022\022\n\nloop_count\030\005 \001(\r"
    "\022=\n\014sprite_phase\030\006 \003(\0132\'.tibia.protobuf."
    "appearances.SpritePhase\":\n\003Box\022\t\n\001x\030\001 \001("
    "\r\022\t\n\001y\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 "
    "\001(\r\"\246\002\n\nSpriteInfo\022\025\n\rpattern_width\030\001 \001("
    "\r\022\026\n\016pattern_height\030\002 \001(\r\022\025\n\rpattern_dep"
    "th\030\003 \001(\r\022\016\n\006layers\030\004 \001(\r\022\021\n\tsprite_id\030\005 "
    "\003(\r\022\027\n\017bounding_square\030\007 \001(\r\022>\n\tanimatio"
    "n\030\006 \001(\0132+.tibia.protobuf.appearances.Spr"
    "iteAnimation\022\021\n\tis_opaque\030\010 \001(\010\022C\n\032bound"
    "ing_box_per_direction\030\t \003(\0132\037.tibia.prot"
    "obuf.appearances.Box\"\237\001\n\nFrameGroup\022H\n\021f"
    "ixed_frame_group\030\001 \001(\0162-.tibia.protobuf."
    "appearances.FIXED_FRAME_GROUP\022\n\n\002id\030\002 \001("
    "\r\022;\n\013sprite_info\030\003 \001(\0132&.tibia.protobuf."
    "appearances.SpriteInfo\"\237\001\n\nAppearance\022\n\n"
    "\002id\030\001 \001(\r\022;\n\013frame_group\030\002 \003(\0132&.tibia.p"
    "rotobuf.appearances.FrameGroup\022:\n\005flags\030"
    "\003 \001(\0132+.tibia.protobuf.appearances.Appea"
    "ranceFlags\022\014\n\004name\030\004 \001(\t\"\262\014\n\017AppearanceF"
    "lags\022<\n\004bank\030\001 \001(\0132..tibia.protobuf.appe"
    "arances.AppearanceFlagBank\022\014\n\004clip\030\002 \001(\010"
    "\022\016\n\006bottom\030\003 \001(\010\022\013\n\003top\030\004 \001(\010\022\021\n\tcontain"
    "er\030\005 \001(\010\022\022\n\ncumulative\030\006 \001(\010\022\016\n\006usable\030\007"
    " \001(\010\022\020\n\010forceuse\030\010 \001(\010\022\020\n\010multiuse\030\t \001(\010"
    "\022>\n\005write\030\n \001(\0132/.tibia.protobuf.appeara"
    "nces.AppearanceFlagWrite\022G\n\nwrite_once\030\013"
    " \001(\01323.tibia.protobuf.appearances.Appear"
    "anceFlagWriteOnce\022\022\n\nliquidpool\030\014 \001(\010\022\016\n"
    "\006unpass\030\r \001(\010\022\016\n\006unmove\030\016 \001(\010\022\017\n\007unsight"
    "\030\017 \001(\010\022\r\n\005avoid\030\020 \001(\010\022\035\n\025no_movement_ani"
    "mation\030\021 \001(\010\022\014\n\004take\030\022 \001(\010\022\027\n\017liquidcont"
    "ainer\030\023 \001(\010\022\014\n\004hang\030\024 \001(\010\022<\n\004hook\030\025 \001(\0132"
    "..tibia.protobuf.appearances.AppearanceF"
    "lagHook\022\016\n\006rotate\030\026 \001(\010\022>\n\005light\030\027 \001(\0132/"
    ".tibia.protobuf.appearances.AppearanceFl"
    "agLight\022\021\n\tdont_hide\030\030 \001(\010\022\023\n\013translucen"
    "t\030\031 \001(\010\022>\n\005shift\030\032 \001(\0132/.tibia.protobuf."
    "appearances.AppearanceFlagShift\022@\n\006heigh"
    "t\030\033 \001(\01320.tibia.protobuf.appearances.App"
    "earanceFlagHeight\022\024\n\014lying_object\030\034 \001(\010\022"
    "\026\n\016animate_always\030\035 \001(\010\022B\n\007automap\030\036 \001(\013"
    "21.tibia.protobuf.appearances.Appearance"
    "FlagAutomap\022D\n\010lenshelp\030\037 \001(\01322.tibia.pr"
    "otobuf.appearances.AppearanceFlagLenshel"
    "p\022\020\n\010fullbank\030  \001(\010\022\023\n\013ignore_look\030! \001(\010"
    "\022B\n\007clothes\030\" \001(\01321.tibia.protobuf.appea"
    "rances.AppearanceFlagClothes\022O\n\016default_"
    "action\030# \001(\01327.tibia.protobuf.appearance"
    "s.AppearanceFlagDefaultAction\022@\n\006market\030"
    "$ \001(\01320.tibia.protobuf.appearances.Appea"
    "ranceFlagMarket\022\014\n\004wrap\030% \001(\010\022\016\n\006unwrap\030"
    "& \001(\010\022\021\n\ttopeffect\030\' \001(\010\022B\n\013npcsaledata\030"
    "( \003(\0132-.tibia.protobuf.appearances.Appea"
    "ranceFlagNPC\022R\n\017changedtoexpire\030) \001(\01329."
    "tibia.protobuf.appearances.AppearanceFla"
    "gChangedToExpire\022\016\n\006corpse\030* \001(\010\022\025\n\rplay"
    "er_corpse\030+ \001(\010\022L\n\016cyclopediaitem\030, \001(\0132"
    "4.tibia.protobuf.appearances.AppearanceF"
    "lagCyclopedia\"\'\n\022AppearanceFlagBank\022\021\n\tw"
    "aypoints\030\001 \001(\r\".\n\023AppearanceFlagWrite\022\027\n"
    "\017max_text_length\030\001 \001(\r\"7\n\027AppearanceFlag"
    "WriteOnce\022\034\n\024max_text_length_once\030\001 \001(\r\""
    "8\n\023AppearanceFlagLight\022\022\n\nbrightness\030\001 \001"
    "(\r\022\r\n\005color\030\002 \001(\r\")\n\024AppearanceFlagHeigh"
    "t\022\021\n\televation\030\001 \001(\r\"+\n\023AppearanceFlagSh"
    "ift\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\"%\n\025AppearanceF"
    "lagClothes\022\014\n\004slot\030\001 \001(\r\"S\n\033AppearanceFl"
    "agDefaultAction\0224\n\006action\030\001 \001(\0162$.tibia."
    "protobuf.shared.PLAYER_ACTION\"\346\001\n\024Appear"
    "anceFlagMarket\0226\n\010category\030\001 \001(\0162$.tibia"
    ".protobuf.shared.ITEM_CATEGORY\022\032\n\022trade_"
    "as_object_id\030\002 \001(\r\022\031\n\021show_as_object_id\030"
    "\003 \001(\r\022H\n\026restrict_to_profession\030\005 \003(\0162(."
    "tibia.protobuf.shared.PLAYER_PROFESSION\022"
    "\025\n\rminimum_level\030\006 \001(\r\"Z\n\021AppearanceFlag"
    "NPC\022\014\n\004name\030\001 \001(\t\022\020\n\010location\030\002 \001(\t\022\022\n\ns"
    "ale_price\030\003 \001(\r\022\021\n\tbuy_price\030\004 \001(\r\"&\n\025Ap"
    "pearanceFlagAutomap\022\r\n\005color\030\001 \001(\r\"I\n\022Ap"
    "pearanceFlagHook\0223\n\tdirection\030\001 \001(\0162 .ti"
    "bia.protobuf.shared.HOOK_TYPE\"$\n\026Appeara"
    "nceFlagLenshelp\022\n\n\002id\030\001 \001(\r\"=\n\035Appearanc"
    "eFlagChangedToExpire\022\034\n\024former_object_ty"
    "peid\030\001 \001(\r\"3\n\030AppearanceFlagCyclopedia\022\027"
    "\n\017cyclopedia_type\030\001 \001(\r\"\261\001\n\033SpecialMeani"
    "ngAppearanceIds\022\024\n\014gold_coin_id\030\001 \001(\r\022\030\n"
    "\020platinum_coin_id\030\002 \001(\r\022\027\n\017crystal_coin_"
    "id\030\003 \001(\r\022\025\n\rtibia_coin_id\030\004 \001(\r\022\031\n\021stamp"
    "ed_letter_id\030\005 \001(\r\022\027\n\017supply_stash_id\030\006 "
    "\001(\r*\201\001\n\021FIXED_FRAME_GROUP\022!\n\035FIXED_FRAME"
    "_GROUP_OUTFIT_IDLE\020\000\022#\n\037FIXED_FRAME_GROU"
    "P_OUTFIT_MOVING\020\001\022$\n FIXED_FRAME_GROUP_O"
    "BJECT_INITIAL\020\002", 4295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "appearances.proto", &protobuf_RegisterTypes);
  Appearances::default_instance_ = new Appearances();
  SpritePhase::default_instance_ = new SpritePhase();
  SpriteAnimation::default_instance_ = new SpriteAnimation();
  Box::default_instance_ = new Box();
  SpriteInfo::default_instance_ = new SpriteInfo();
  FrameGroup::default_instance_ = new FrameGroup();
  Appearance::default_instance_ = new Appearance();
  AppearanceFlags::default_instance_ = new AppearanceFlags();
  AppearanceFlagBank::default_instance_ = new AppearanceFlagBank();
  AppearanceFlagWrite::default_instance_ = new AppearanceFlagWrite();
  AppearanceFlagWriteOnce::default_instance_ = new AppearanceFlagWriteOnce();
  AppearanceFlagLight::default_instance_ = new AppearanceFlagLight();
  AppearanceFlagHeight::default_instance_ = new AppearanceFlagHeight();
  AppearanceFlagShift::default_instance_ = new AppearanceFlagShift();
  AppearanceFlagClothes::default_instance_ = new AppearanceFlagClothes();
  AppearanceFlagDefaultAction::default_instance_ = new AppearanceFlagDefaultAction();
  AppearanceFlagMarket::default_instance_ = new AppearanceFlagMarket();
  AppearanceFlagNPC::default_instance_ = new AppearanceFlagNPC();
  AppearanceFlagAutomap::default_instance_ = new AppearanceFlagAutomap();
  AppearanceFlagHook::default_instance_ = new AppearanceFlagHook();
  AppearanceFlagLenshelp::default_instance_ = new AppearanceFlagLenshelp();
  AppearanceFlagChangedToExpire::default_instance_ = new AppearanceFlagChangedToExpire();
  AppearanceFlagCyclopedia::default_instance_ = new AppearanceFlagCyclopedia();
  SpecialMeaningAppearanceIds::default_instance_ = new SpecialMeaningAppearanceIds();
  Appearances::default_instance_->InitAsDefaultInstance();
  SpritePhase::default_instance_->InitAsDefaultInstance();
  SpriteAnimation::default_instance_->InitAsDefaultInstance();
  Box::default_instance_->InitAsDefaultInstance();
  SpriteInfo::default_instance_->InitAsDefaultInstance();
  FrameGroup::default_instance_->InitAsDefaultInstance();
  Appearance::default_instance_->InitAsDefaultInstance();
  AppearanceFlags::default_instance_->InitAsDefaultInstance();
  AppearanceFlagBank::default_instance_->InitAsDefaultInstance();
  AppearanceFlagWrite::default_instance_->InitAsDefaultInstance();
  AppearanceFlagWriteOnce::default_instance_->InitAsDefaultInstance();
  AppearanceFlagLight::default_instance_->InitAsDefaultInstance();
  AppearanceFlagHeight::default_instance_->InitAsDefaultInstance();
  AppearanceFlagShift::default_instance_->InitAsDefaultInstance();
  AppearanceFlagClothes::default_instance_->InitAsDefaultInstance();
  AppearanceFlagDefaultAction::default_instance_->InitAsDefaultInstance();
  AppearanceFlagMarket::default_instance_->InitAsDefaultInstance();
  AppearanceFlagNPC::default_instance_->InitAsDefaultInstance();
  AppearanceFlagAutomap::default_instance_->InitAsDefaultInstance();
  AppearanceFlagHook::default_instance_->InitAsDefaultInstance();
  AppearanceFlagLenshelp::default_instance_->InitAsDefaultInstance();
  AppearanceFlagChangedToExpire::default_instance_->InitAsDefaultInstance();
  AppearanceFlagCyclopedia::default_instance_->InitAsDefaultInstance();
  SpecialMeaningAppearanceIds::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_appearances_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_appearances_2eproto {
  StaticDescriptorInitializer_appearances_2eproto() {
    protobuf_AddDesc_appearances_2eproto();
  }
} static_descriptor_initializer_appearances_2eproto_;
const ::google::protobuf::EnumDescriptor* FIXED_FRAME_GROUP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIXED_FRAME_GROUP_descriptor_;
}
bool FIXED_FRAME_GROUP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Appearances::kObjectFieldNumber;
const int Appearances::kOutfitFieldNumber;
const int Appearances::kEffectFieldNumber;
const int Appearances::kMissileFieldNumber;
const int Appearances::kSpecialMeaningAppearanceIdsFieldNumber;
#endif  // !_MSC_VER

Appearances::Appearances()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.Appearances)
}

void Appearances::InitAsDefaultInstance() {
  special_meaning_appearance_ids_ = const_cast< ::tibia::protobuf::appearances::SpecialMeaningAppearanceIds*>(&::tibia::protobuf::appearances::SpecialMeaningAppearanceIds::default_instance());
}

Appearances::Appearances(const Appearances& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.Appearances)
}

void Appearances::SharedCtor() {
  _cached_size_ = 0;
  special_meaning_appearance_ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Appearances::~Appearances() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.Appearances)
  SharedDtor();
}

void Appearances::SharedDtor() {
  if (this != default_instance_) {
    delete special_meaning_appearance_ids_;
  }
}

void Appearances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Appearances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Appearances_descriptor_;
}

const Appearances& Appearances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

Appearances* Appearances::default_instance_ = NULL;

Appearances* Appearances::New() const {
  return new Appearances;
}

void Appearances::Clear() {
  if (has_special_meaning_appearance_ids()) {
    if (special_meaning_appearance_ids_ != NULL) special_meaning_appearance_ids_->::tibia::protobuf::appearances::SpecialMeaningAppearanceIds::Clear();
  }
  object_.Clear();
  outfit_.Clear();
  effect_.Clear();
  missile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Appearances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.Appearances)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tibia.protobuf.appearances.Appearance object = 1;
      case 1: {
        if (tag == 10) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_object;
        if (input->ExpectTag(18)) goto parse_outfit;
        break;
      }

      // repeated .tibia.protobuf.appearances.Appearance outfit = 2;
      case 2: {
        if (tag == 18) {
         parse_outfit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outfit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outfit;
        if (input->ExpectTag(26)) goto parse_effect;
        break;
      }

      // repeated .tibia.protobuf.appearances.Appearance effect = 3;
      case 3: {
        if (tag == 26) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        if (input->ExpectTag(34)) goto parse_missile;
        break;
      }

      // repeated .tibia.protobuf.appearances.Appearance missile = 4;
      case 4: {
        if (tag == 34) {
         parse_missile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_missile;
        if (input->ExpectTag(42)) goto parse_special_meaning_appearance_ids;
        break;
      }

      // optional .tibia.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_special_meaning_appearance_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_special_meaning_appearance_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.Appearances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.Appearances)
  return false;
#undef DO_
}

void Appearances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.Appearances)
  // repeated .tibia.protobuf.appearances.Appearance object = 1;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object(i), output);
  }

  // repeated .tibia.protobuf.appearances.Appearance outfit = 2;
  for (int i = 0; i < this->outfit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outfit(i), output);
  }

  // repeated .tibia.protobuf.appearances.Appearance effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effect(i), output);
  }

  // repeated .tibia.protobuf.appearances.Appearance missile = 4;
  for (int i = 0; i < this->missile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->missile(i), output);
  }

  // optional .tibia.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
  if (has_special_meaning_appearance_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->special_meaning_appearance_ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.Appearances)
}

::google::protobuf::uint8* Appearances::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.Appearances)
  // repeated .tibia.protobuf.appearances.Appearance object = 1;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object(i), target);
  }

  // repeated .tibia.protobuf.appearances.Appearance outfit = 2;
  for (int i = 0; i < this->outfit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outfit(i), target);
  }

  // repeated .tibia.protobuf.appearances.Appearance effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effect(i), target);
  }

  // repeated .tibia.protobuf.appearances.Appearance missile = 4;
  for (int i = 0; i < this->missile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->missile(i), target);
  }

  // optional .tibia.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
  if (has_special_meaning_appearance_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->special_meaning_appearance_ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.Appearances)
  return target;
}

int Appearances::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .tibia.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
    if (has_special_meaning_appearance_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->special_meaning_appearance_ids());
    }

  }
  // repeated .tibia.protobuf.appearances.Appearance object = 1;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  // repeated .tibia.protobuf.appearances.Appearance outfit = 2;
  total_size += 1 * this->outfit_size();
  for (int i = 0; i < this->outfit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outfit(i));
  }

  // repeated .tibia.protobuf.appearances.Appearance effect = 3;
  total_size += 1 * this->effect_size();
  for (int i = 0; i < this->effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect(i));
  }

  // repeated .tibia.protobuf.appearances.Appearance missile = 4;
  total_size += 1 * this->missile_size();
  for (int i = 0; i < this->missile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Appearances::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Appearances* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Appearances*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Appearances::MergeFrom(const Appearances& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_.MergeFrom(from.object_);
  outfit_.MergeFrom(from.outfit_);
  effect_.MergeFrom(from.effect_);
  missile_.MergeFrom(from.missile_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_special_meaning_appearance_ids()) {
      mutable_special_meaning_appearance_ids()->::tibia::protobuf::appearances::SpecialMeaningAppearanceIds::MergeFrom(from.special_meaning_appearance_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Appearances::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Appearances::CopyFrom(const Appearances& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Appearances::IsInitialized() const {

  return true;
}

void Appearances::Swap(Appearances* other) {
  if (other != this) {
    object_.Swap(&other->object_);
    outfit_.Swap(&other->outfit_);
    effect_.Swap(&other->effect_);
    missile_.Swap(&other->missile_);
    std::swap(special_meaning_appearance_ids_, other->special_meaning_appearance_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Appearances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Appearances_descriptor_;
  metadata.reflection = Appearances_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpritePhase::kDurationMinFieldNumber;
const int SpritePhase::kDurationMaxFieldNumber;
#endif  // !_MSC_VER

SpritePhase::SpritePhase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.SpritePhase)
}

void SpritePhase::InitAsDefaultInstance() {
}

SpritePhase::SpritePhase(const SpritePhase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.SpritePhase)
}

void SpritePhase::SharedCtor() {
  _cached_size_ = 0;
  duration_min_ = 0u;
  duration_max_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpritePhase::~SpritePhase() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.SpritePhase)
  SharedDtor();
}

void SpritePhase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpritePhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpritePhase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpritePhase_descriptor_;
}

const SpritePhase& SpritePhase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

SpritePhase* SpritePhase::default_instance_ = NULL;

SpritePhase* SpritePhase::New() const {
  return new SpritePhase;
}

void SpritePhase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpritePhase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(duration_min_, duration_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpritePhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.SpritePhase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration_min = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_min_)));
          set_has_duration_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration_max;
        break;
      }

      // optional uint32 duration_max = 2;
      case 2: {
        if (tag == 16) {
         parse_duration_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_max_)));
          set_has_duration_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.SpritePhase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.SpritePhase)
  return false;
#undef DO_
}

void SpritePhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.SpritePhase)
  // optional uint32 duration_min = 1;
  if (has_duration_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration_min(), output);
  }

  // optional uint32 duration_max = 2;
  if (has_duration_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.SpritePhase)
}

::google::protobuf::uint8* SpritePhase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.SpritePhase)
  // optional uint32 duration_min = 1;
  if (has_duration_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration_min(), target);
  }

  // optional uint32 duration_max = 2;
  if (has_duration_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.SpritePhase)
  return target;
}

int SpritePhase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 duration_min = 1;
    if (has_duration_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_min());
    }

    // optional uint32 duration_max = 2;
    if (has_duration_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpritePhase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpritePhase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpritePhase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpritePhase::MergeFrom(const SpritePhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration_min()) {
      set_duration_min(from.duration_min());
    }
    if (from.has_duration_max()) {
      set_duration_max(from.duration_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpritePhase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpritePhase::CopyFrom(const SpritePhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpritePhase::IsInitialized() const {

  return true;
}

void SpritePhase::Swap(SpritePhase* other) {
  if (other != this) {
    std::swap(duration_min_, other->duration_min_);
    std::swap(duration_max_, other->duration_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpritePhase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpritePhase_descriptor_;
  metadata.reflection = SpritePhase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteAnimation::kDefaultStartPhaseFieldNumber;
const int SpriteAnimation::kSynchronizedFieldNumber;
const int SpriteAnimation::kRandomStartPhaseFieldNumber;
const int SpriteAnimation::kLoopTypeFieldNumber;
const int SpriteAnimation::kLoopCountFieldNumber;
const int SpriteAnimation::kSpritePhaseFieldNumber;
#endif  // !_MSC_VER

SpriteAnimation::SpriteAnimation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.SpriteAnimation)
}

void SpriteAnimation::InitAsDefaultInstance() {
}

SpriteAnimation::SpriteAnimation(const SpriteAnimation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.SpriteAnimation)
}

void SpriteAnimation::SharedCtor() {
  _cached_size_ = 0;
  default_start_phase_ = 0u;
  synchronized_ = false;
  random_start_phase_ = false;
  loop_type_ = -1;
  loop_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteAnimation::~SpriteAnimation() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.SpriteAnimation)
  SharedDtor();
}

void SpriteAnimation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpriteAnimation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteAnimation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteAnimation_descriptor_;
}

const SpriteAnimation& SpriteAnimation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

SpriteAnimation* SpriteAnimation::default_instance_ = NULL;

SpriteAnimation* SpriteAnimation::New() const {
  return new SpriteAnimation;
}

void SpriteAnimation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpriteAnimation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(default_start_phase_, random_start_phase_);
    loop_type_ = -1;
    loop_count_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sprite_phase_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpriteAnimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.SpriteAnimation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 default_start_phase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_start_phase_)));
          set_has_default_start_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_synchronized;
        break;
      }

      // optional bool synchronized = 2;
      case 2: {
        if (tag == 16) {
         parse_synchronized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronized_)));
          set_has_synchronized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_random_start_phase;
        break;
      }

      // optional bool random_start_phase = 3;
      case 3: {
        if (tag == 24) {
         parse_random_start_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_start_phase_)));
          set_has_random_start_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_loop_type;
        break;
      }

      // optional .tibia.protobuf.shared.ANIMATION_LOOP_TYPE loop_type = 4;
      case 4: {
        if (tag == 32) {
         parse_loop_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::shared::ANIMATION_LOOP_TYPE_IsValid(value)) {
            set_loop_type(static_cast< ::tibia::protobuf::shared::ANIMATION_LOOP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loop_count;
        break;
      }

      // optional uint32 loop_count = 5;
      case 5: {
        if (tag == 40) {
         parse_loop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loop_count_)));
          set_has_loop_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sprite_phase;
        break;
      }

      // repeated .tibia.protobuf.appearances.SpritePhase sprite_phase = 6;
      case 6: {
        if (tag == 50) {
         parse_sprite_phase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprite_phase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sprite_phase;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.SpriteAnimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.SpriteAnimation)
  return false;
#undef DO_
}

void SpriteAnimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.SpriteAnimation)
  // optional uint32 default_start_phase = 1;
  if (has_default_start_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->default_start_phase(), output);
  }

  // optional bool synchronized = 2;
  if (has_synchronized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->synchronized(), output);
  }

  // optional bool random_start_phase = 3;
  if (has_random_start_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->random_start_phase(), output);
  }

  // optional .tibia.protobuf.shared.ANIMATION_LOOP_TYPE loop_type = 4;
  if (has_loop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->loop_type(), output);
  }

  // optional uint32 loop_count = 5;
  if (has_loop_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loop_count(), output);
  }

  // repeated .tibia.protobuf.appearances.SpritePhase sprite_phase = 6;
  for (int i = 0; i < this->sprite_phase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sprite_phase(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.SpriteAnimation)
}

::google::protobuf::uint8* SpriteAnimation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.SpriteAnimation)
  // optional uint32 default_start_phase = 1;
  if (has_default_start_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->default_start_phase(), target);
  }

  // optional bool synchronized = 2;
  if (has_synchronized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->synchronized(), target);
  }

  // optional bool random_start_phase = 3;
  if (has_random_start_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->random_start_phase(), target);
  }

  // optional .tibia.protobuf.shared.ANIMATION_LOOP_TYPE loop_type = 4;
  if (has_loop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->loop_type(), target);
  }

  // optional uint32 loop_count = 5;
  if (has_loop_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loop_count(), target);
  }

  // repeated .tibia.protobuf.appearances.SpritePhase sprite_phase = 6;
  for (int i = 0; i < this->sprite_phase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sprite_phase(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.SpriteAnimation)
  return target;
}

int SpriteAnimation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 default_start_phase = 1;
    if (has_default_start_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_start_phase());
    }

    // optional bool synchronized = 2;
    if (has_synchronized()) {
      total_size += 1 + 1;
    }

    // optional bool random_start_phase = 3;
    if (has_random_start_phase()) {
      total_size += 1 + 1;
    }

    // optional .tibia.protobuf.shared.ANIMATION_LOOP_TYPE loop_type = 4;
    if (has_loop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_type());
    }

    // optional uint32 loop_count = 5;
    if (has_loop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loop_count());
    }

  }
  // repeated .tibia.protobuf.appearances.SpritePhase sprite_phase = 6;
  total_size += 1 * this->sprite_phase_size();
  for (int i = 0; i < this->sprite_phase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprite_phase(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteAnimation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpriteAnimation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpriteAnimation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpriteAnimation::MergeFrom(const SpriteAnimation& from) {
  GOOGLE_CHECK_NE(&from, this);
  sprite_phase_.MergeFrom(from.sprite_phase_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_default_start_phase()) {
      set_default_start_phase(from.default_start_phase());
    }
    if (from.has_synchronized()) {
      set_synchronized(from.synchronized());
    }
    if (from.has_random_start_phase()) {
      set_random_start_phase(from.random_start_phase());
    }
    if (from.has_loop_type()) {
      set_loop_type(from.loop_type());
    }
    if (from.has_loop_count()) {
      set_loop_count(from.loop_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpriteAnimation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteAnimation::CopyFrom(const SpriteAnimation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteAnimation::IsInitialized() const {

  return true;
}

void SpriteAnimation::Swap(SpriteAnimation* other) {
  if (other != this) {
    std::swap(default_start_phase_, other->default_start_phase_);
    std::swap(synchronized_, other->synchronized_);
    std::swap(random_start_phase_, other->random_start_phase_);
    std::swap(loop_type_, other->loop_type_);
    std::swap(loop_count_, other->loop_count_);
    sprite_phase_.Swap(&other->sprite_phase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpriteAnimation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteAnimation_descriptor_;
  metadata.reflection = SpriteAnimation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Box::kXFieldNumber;
const int Box::kYFieldNumber;
const int Box::kWidthFieldNumber;
const int Box::kHeightFieldNumber;
#endif  // !_MSC_VER

Box::Box()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.Box)
}

void Box::InitAsDefaultInstance() {
}

Box::Box(const Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.Box)
}

void Box::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.Box)
  SharedDtor();
}

void Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

Box* Box::default_instance_ = NULL;

Box* Box::New() const {
  return new Box;
}

void Box::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Box*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.Box)
  return false;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.Box)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.Box)
}

::google::protobuf::uint8* Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.Box)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.Box)
  return target;
}

int Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {

  return true;
}

void Box::Swap(Box* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteInfo::kPatternWidthFieldNumber;
const int SpriteInfo::kPatternHeightFieldNumber;
const int SpriteInfo::kPatternDepthFieldNumber;
const int SpriteInfo::kLayersFieldNumber;
const int SpriteInfo::kSpriteIdFieldNumber;
const int SpriteInfo::kBoundingSquareFieldNumber;
const int SpriteInfo::kAnimationFieldNumber;
const int SpriteInfo::kIsOpaqueFieldNumber;
const int SpriteInfo::kBoundingBoxPerDirectionFieldNumber;
#endif  // !_MSC_VER

SpriteInfo::SpriteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.SpriteInfo)
}

void SpriteInfo::InitAsDefaultInstance() {
  animation_ = const_cast< ::tibia::protobuf::appearances::SpriteAnimation*>(&::tibia::protobuf::appearances::SpriteAnimation::default_instance());
}

SpriteInfo::SpriteInfo(const SpriteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.SpriteInfo)
}

void SpriteInfo::SharedCtor() {
  _cached_size_ = 0;
  pattern_width_ = 0u;
  pattern_height_ = 0u;
  pattern_depth_ = 0u;
  layers_ = 0u;
  bounding_square_ = 0u;
  animation_ = NULL;
  is_opaque_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteInfo::~SpriteInfo() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.SpriteInfo)
  SharedDtor();
}

void SpriteInfo::SharedDtor() {
  if (this != default_instance_) {
    delete animation_;
  }
}

void SpriteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteInfo_descriptor_;
}

const SpriteInfo& SpriteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

SpriteInfo* SpriteInfo::default_instance_ = NULL;

SpriteInfo* SpriteInfo::New() const {
  return new SpriteInfo;
}

void SpriteInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpriteInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(pattern_width_, layers_);
    ZR_(bounding_square_, is_opaque_);
    if (has_animation()) {
      if (animation_ != NULL) animation_->::tibia::protobuf::appearances::SpriteAnimation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sprite_id_.Clear();
  bounding_box_per_direction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpriteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.SpriteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pattern_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pattern_width_)));
          set_has_pattern_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pattern_height;
        break;
      }

      // optional uint32 pattern_height = 2;
      case 2: {
        if (tag == 16) {
         parse_pattern_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pattern_height_)));
          set_has_pattern_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pattern_depth;
        break;
      }

      // optional uint32 pattern_depth = 3;
      case 3: {
        if (tag == 24) {
         parse_pattern_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pattern_depth_)));
          set_has_pattern_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_layers;
        break;
      }

      // optional uint32 layers = 4;
      case 4: {
        if (tag == 32) {
         parse_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layers_)));
          set_has_layers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sprite_id;
        break;
      }

      // repeated uint32 sprite_id = 5;
      case 5: {
        if (tag == 40) {
         parse_sprite_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_sprite_id())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sprite_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sprite_id;
        if (input->ExpectTag(50)) goto parse_animation;
        break;
      }

      // optional .tibia.protobuf.appearances.SpriteAnimation animation = 6;
      case 6: {
        if (tag == 50) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bounding_square;
        break;
      }

      // optional uint32 bounding_square = 7;
      case 7: {
        if (tag == 56) {
         parse_bounding_square:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounding_square_)));
          set_has_bounding_square();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_opaque;
        break;
      }

      // optional bool is_opaque = 8;
      case 8: {
        if (tag == 64) {
         parse_is_opaque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_opaque_)));
          set_has_is_opaque();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bounding_box_per_direction;
        break;
      }

      // repeated .tibia.protobuf.appearances.Box bounding_box_per_direction = 9;
      case 9: {
        if (tag == 74) {
         parse_bounding_box_per_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bounding_box_per_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bounding_box_per_direction;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.SpriteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.SpriteInfo)
  return false;
#undef DO_
}

void SpriteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.SpriteInfo)
  // optional uint32 pattern_width = 1;
  if (has_pattern_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pattern_width(), output);
  }

  // optional uint32 pattern_height = 2;
  if (has_pattern_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pattern_height(), output);
  }

  // optional uint32 pattern_depth = 3;
  if (has_pattern_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pattern_depth(), output);
  }

  // optional uint32 layers = 4;
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->layers(), output);
  }

  // repeated uint32 sprite_id = 5;
  for (int i = 0; i < this->sprite_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->sprite_id(i), output);
  }

  // optional .tibia.protobuf.appearances.SpriteAnimation animation = 6;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->animation(), output);
  }

  // optional uint32 bounding_square = 7;
  if (has_bounding_square()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bounding_square(), output);
  }

  // optional bool is_opaque = 8;
  if (has_is_opaque()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_opaque(), output);
  }

  // repeated .tibia.protobuf.appearances.Box bounding_box_per_direction = 9;
  for (int i = 0; i < this->bounding_box_per_direction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bounding_box_per_direction(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.SpriteInfo)
}

::google::protobuf::uint8* SpriteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.SpriteInfo)
  // optional uint32 pattern_width = 1;
  if (has_pattern_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pattern_width(), target);
  }

  // optional uint32 pattern_height = 2;
  if (has_pattern_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pattern_height(), target);
  }

  // optional uint32 pattern_depth = 3;
  if (has_pattern_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pattern_depth(), target);
  }

  // optional uint32 layers = 4;
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->layers(), target);
  }

  // repeated uint32 sprite_id = 5;
  for (int i = 0; i < this->sprite_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->sprite_id(i), target);
  }

  // optional .tibia.protobuf.appearances.SpriteAnimation animation = 6;
  if (has_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->animation(), target);
  }

  // optional uint32 bounding_square = 7;
  if (has_bounding_square()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bounding_square(), target);
  }

  // optional bool is_opaque = 8;
  if (has_is_opaque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_opaque(), target);
  }

  // repeated .tibia.protobuf.appearances.Box bounding_box_per_direction = 9;
  for (int i = 0; i < this->bounding_box_per_direction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bounding_box_per_direction(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.SpriteInfo)
  return target;
}

int SpriteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pattern_width = 1;
    if (has_pattern_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pattern_width());
    }

    // optional uint32 pattern_height = 2;
    if (has_pattern_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pattern_height());
    }

    // optional uint32 pattern_depth = 3;
    if (has_pattern_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pattern_depth());
    }

    // optional uint32 layers = 4;
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layers());
    }

    // optional uint32 bounding_square = 7;
    if (has_bounding_square()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounding_square());
    }

    // optional .tibia.protobuf.appearances.SpriteAnimation animation = 6;
    if (has_animation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animation());
    }

    // optional bool is_opaque = 8;
    if (has_is_opaque()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 sprite_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->sprite_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sprite_id(i));
    }
    total_size += 1 * this->sprite_id_size() + data_size;
  }

  // repeated .tibia.protobuf.appearances.Box bounding_box_per_direction = 9;
  total_size += 1 * this->bounding_box_per_direction_size();
  for (int i = 0; i < this->bounding_box_per_direction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bounding_box_per_direction(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpriteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpriteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpriteInfo::MergeFrom(const SpriteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sprite_id_.MergeFrom(from.sprite_id_);
  bounding_box_per_direction_.MergeFrom(from.bounding_box_per_direction_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern_width()) {
      set_pattern_width(from.pattern_width());
    }
    if (from.has_pattern_height()) {
      set_pattern_height(from.pattern_height());
    }
    if (from.has_pattern_depth()) {
      set_pattern_depth(from.pattern_depth());
    }
    if (from.has_layers()) {
      set_layers(from.layers());
    }
    if (from.has_bounding_square()) {
      set_bounding_square(from.bounding_square());
    }
    if (from.has_animation()) {
      mutable_animation()->::tibia::protobuf::appearances::SpriteAnimation::MergeFrom(from.animation());
    }
    if (from.has_is_opaque()) {
      set_is_opaque(from.is_opaque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpriteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteInfo::CopyFrom(const SpriteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteInfo::IsInitialized() const {

  return true;
}

void SpriteInfo::Swap(SpriteInfo* other) {
  if (other != this) {
    std::swap(pattern_width_, other->pattern_width_);
    std::swap(pattern_height_, other->pattern_height_);
    std::swap(pattern_depth_, other->pattern_depth_);
    std::swap(layers_, other->layers_);
    sprite_id_.Swap(&other->sprite_id_);
    std::swap(bounding_square_, other->bounding_square_);
    std::swap(animation_, other->animation_);
    std::swap(is_opaque_, other->is_opaque_);
    bounding_box_per_direction_.Swap(&other->bounding_box_per_direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpriteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteInfo_descriptor_;
  metadata.reflection = SpriteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameGroup::kFixedFrameGroupFieldNumber;
const int FrameGroup::kIdFieldNumber;
const int FrameGroup::kSpriteInfoFieldNumber;
#endif  // !_MSC_VER

FrameGroup::FrameGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.FrameGroup)
}

void FrameGroup::InitAsDefaultInstance() {
  sprite_info_ = const_cast< ::tibia::protobuf::appearances::SpriteInfo*>(&::tibia::protobuf::appearances::SpriteInfo::default_instance());
}

FrameGroup::FrameGroup(const FrameGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.FrameGroup)
}

void FrameGroup::SharedCtor() {
  _cached_size_ = 0;
  fixed_frame_group_ = 0;
  id_ = 0u;
  sprite_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameGroup::~FrameGroup() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.FrameGroup)
  SharedDtor();
}

void FrameGroup::SharedDtor() {
  if (this != default_instance_) {
    delete sprite_info_;
  }
}

void FrameGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameGroup_descriptor_;
}

const FrameGroup& FrameGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

FrameGroup* FrameGroup::default_instance_ = NULL;

FrameGroup* FrameGroup::New() const {
  return new FrameGroup;
}

void FrameGroup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameGroup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(fixed_frame_group_, id_);
    if (has_sprite_info()) {
      if (sprite_info_ != NULL) sprite_info_->::tibia::protobuf::appearances::SpriteInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.FrameGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tibia.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::appearances::FIXED_FRAME_GROUP_IsValid(value)) {
            set_fixed_frame_group(static_cast< ::tibia::protobuf::appearances::FIXED_FRAME_GROUP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sprite_info;
        break;
      }

      // optional .tibia.protobuf.appearances.SpriteInfo sprite_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sprite_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.FrameGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.FrameGroup)
  return false;
#undef DO_
}

void FrameGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.FrameGroup)
  // optional .tibia.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
  if (has_fixed_frame_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fixed_frame_group(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .tibia.protobuf.appearances.SpriteInfo sprite_info = 3;
  if (has_sprite_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sprite_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.FrameGroup)
}

::google::protobuf::uint8* FrameGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.FrameGroup)
  // optional .tibia.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
  if (has_fixed_frame_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fixed_frame_group(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .tibia.protobuf.appearances.SpriteInfo sprite_info = 3;
  if (has_sprite_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sprite_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.FrameGroup)
  return target;
}

int FrameGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tibia.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
    if (has_fixed_frame_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fixed_frame_group());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .tibia.protobuf.appearances.SpriteInfo sprite_info = 3;
    if (has_sprite_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameGroup::MergeFrom(const FrameGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fixed_frame_group()) {
      set_fixed_frame_group(from.fixed_frame_group());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sprite_info()) {
      mutable_sprite_info()->::tibia::protobuf::appearances::SpriteInfo::MergeFrom(from.sprite_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameGroup::CopyFrom(const FrameGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameGroup::IsInitialized() const {

  return true;
}

void FrameGroup::Swap(FrameGroup* other) {
  if (other != this) {
    std::swap(fixed_frame_group_, other->fixed_frame_group_);
    std::swap(id_, other->id_);
    std::swap(sprite_info_, other->sprite_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameGroup_descriptor_;
  metadata.reflection = FrameGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Appearance::kIdFieldNumber;
const int Appearance::kFrameGroupFieldNumber;
const int Appearance::kFlagsFieldNumber;
const int Appearance::kNameFieldNumber;
#endif  // !_MSC_VER

Appearance::Appearance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.Appearance)
}

void Appearance::InitAsDefaultInstance() {
  flags_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlags*>(&::tibia::protobuf::appearances::AppearanceFlags::default_instance());
}

Appearance::Appearance(const Appearance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.Appearance)
}

void Appearance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  flags_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Appearance::~Appearance() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.Appearance)
  SharedDtor();
}

void Appearance::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete flags_;
  }
}

void Appearance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Appearance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Appearance_descriptor_;
}

const Appearance& Appearance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

Appearance* Appearance::default_instance_ = NULL;

Appearance* Appearance::New() const {
  return new Appearance;
}

void Appearance::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    id_ = 0u;
    if (has_flags()) {
      if (flags_ != NULL) flags_->::tibia::protobuf::appearances::AppearanceFlags::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  frame_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Appearance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.Appearance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_group;
        break;
      }

      // repeated .tibia.protobuf.appearances.FrameGroup frame_group = 2;
      case 2: {
        if (tag == 18) {
         parse_frame_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frame_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame_group;
        if (input->ExpectTag(26)) goto parse_flags;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlags flags = 3;
      case 3: {
        if (tag == 26) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.Appearance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.Appearance)
  return false;
#undef DO_
}

void Appearance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.Appearance)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .tibia.protobuf.appearances.FrameGroup frame_group = 2;
  for (int i = 0; i < this->frame_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame_group(i), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlags flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->flags(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.Appearance)
}

::google::protobuf::uint8* Appearance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.Appearance)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .tibia.protobuf.appearances.FrameGroup frame_group = 2;
  for (int i = 0; i < this->frame_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame_group(i), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlags flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->flags(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.Appearance)
  return target;
}

int Appearance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlags flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flags());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .tibia.protobuf.appearances.FrameGroup frame_group = 2;
  total_size += 1 * this->frame_group_size();
  for (int i = 0; i < this->frame_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frame_group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Appearance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Appearance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Appearance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Appearance::MergeFrom(const Appearance& from) {
  GOOGLE_CHECK_NE(&from, this);
  frame_group_.MergeFrom(from.frame_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flags()) {
      mutable_flags()->::tibia::protobuf::appearances::AppearanceFlags::MergeFrom(from.flags());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Appearance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Appearance::CopyFrom(const Appearance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Appearance::IsInitialized() const {

  return true;
}

void Appearance::Swap(Appearance* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frame_group_.Swap(&other->frame_group_);
    std::swap(flags_, other->flags_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Appearance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Appearance_descriptor_;
  metadata.reflection = Appearance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlags::kBankFieldNumber;
const int AppearanceFlags::kClipFieldNumber;
const int AppearanceFlags::kBottomFieldNumber;
const int AppearanceFlags::kTopFieldNumber;
const int AppearanceFlags::kContainerFieldNumber;
const int AppearanceFlags::kCumulativeFieldNumber;
const int AppearanceFlags::kUsableFieldNumber;
const int AppearanceFlags::kForceuseFieldNumber;
const int AppearanceFlags::kMultiuseFieldNumber;
const int AppearanceFlags::kWriteFieldNumber;
const int AppearanceFlags::kWriteOnceFieldNumber;
const int AppearanceFlags::kLiquidpoolFieldNumber;
const int AppearanceFlags::kUnpassFieldNumber;
const int AppearanceFlags::kUnmoveFieldNumber;
const int AppearanceFlags::kUnsightFieldNumber;
const int AppearanceFlags::kAvoidFieldNumber;
const int AppearanceFlags::kNoMovementAnimationFieldNumber;
const int AppearanceFlags::kTakeFieldNumber;
const int AppearanceFlags::kLiquidcontainerFieldNumber;
const int AppearanceFlags::kHangFieldNumber;
const int AppearanceFlags::kHookFieldNumber;
const int AppearanceFlags::kRotateFieldNumber;
const int AppearanceFlags::kLightFieldNumber;
const int AppearanceFlags::kDontHideFieldNumber;
const int AppearanceFlags::kTranslucentFieldNumber;
const int AppearanceFlags::kShiftFieldNumber;
const int AppearanceFlags::kHeightFieldNumber;
const int AppearanceFlags::kLyingObjectFieldNumber;
const int AppearanceFlags::kAnimateAlwaysFieldNumber;
const int AppearanceFlags::kAutomapFieldNumber;
const int AppearanceFlags::kLenshelpFieldNumber;
const int AppearanceFlags::kFullbankFieldNumber;
const int AppearanceFlags::kIgnoreLookFieldNumber;
const int AppearanceFlags::kClothesFieldNumber;
const int AppearanceFlags::kDefaultActionFieldNumber;
const int AppearanceFlags::kMarketFieldNumber;
const int AppearanceFlags::kWrapFieldNumber;
const int AppearanceFlags::kUnwrapFieldNumber;
const int AppearanceFlags::kTopeffectFieldNumber;
const int AppearanceFlags::kNpcsaledataFieldNumber;
const int AppearanceFlags::kChangedtoexpireFieldNumber;
const int AppearanceFlags::kCorpseFieldNumber;
const int AppearanceFlags::kPlayerCorpseFieldNumber;
const int AppearanceFlags::kCyclopediaitemFieldNumber;
#endif  // !_MSC_VER

AppearanceFlags::AppearanceFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlags)
}

void AppearanceFlags::InitAsDefaultInstance() {
  bank_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagBank*>(&::tibia::protobuf::appearances::AppearanceFlagBank::default_instance());
  write_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagWrite*>(&::tibia::protobuf::appearances::AppearanceFlagWrite::default_instance());
  write_once_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagWriteOnce*>(&::tibia::protobuf::appearances::AppearanceFlagWriteOnce::default_instance());
  hook_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagHook*>(&::tibia::protobuf::appearances::AppearanceFlagHook::default_instance());
  light_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagLight*>(&::tibia::protobuf::appearances::AppearanceFlagLight::default_instance());
  shift_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagShift*>(&::tibia::protobuf::appearances::AppearanceFlagShift::default_instance());
  height_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagHeight*>(&::tibia::protobuf::appearances::AppearanceFlagHeight::default_instance());
  automap_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagAutomap*>(&::tibia::protobuf::appearances::AppearanceFlagAutomap::default_instance());
  lenshelp_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagLenshelp*>(&::tibia::protobuf::appearances::AppearanceFlagLenshelp::default_instance());
  clothes_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagClothes*>(&::tibia::protobuf::appearances::AppearanceFlagClothes::default_instance());
  default_action_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagDefaultAction*>(&::tibia::protobuf::appearances::AppearanceFlagDefaultAction::default_instance());
  market_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagMarket*>(&::tibia::protobuf::appearances::AppearanceFlagMarket::default_instance());
  changedtoexpire_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagChangedToExpire*>(&::tibia::protobuf::appearances::AppearanceFlagChangedToExpire::default_instance());
  cyclopediaitem_ = const_cast< ::tibia::protobuf::appearances::AppearanceFlagCyclopedia*>(&::tibia::protobuf::appearances::AppearanceFlagCyclopedia::default_instance());
}

AppearanceFlags::AppearanceFlags(const AppearanceFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlags)
}

void AppearanceFlags::SharedCtor() {
  _cached_size_ = 0;
  bank_ = NULL;
  clip_ = false;
  bottom_ = false;
  top_ = false;
  container_ = false;
  cumulative_ = false;
  usable_ = false;
  forceuse_ = false;
  multiuse_ = false;
  write_ = NULL;
  write_once_ = NULL;
  liquidpool_ = false;
  unpass_ = false;
  unmove_ = false;
  unsight_ = false;
  avoid_ = false;
  no_movement_animation_ = false;
  take_ = false;
  liquidcontainer_ = false;
  hang_ = false;
  hook_ = NULL;
  rotate_ = false;
  light_ = NULL;
  dont_hide_ = false;
  translucent_ = false;
  shift_ = NULL;
  height_ = NULL;
  lying_object_ = false;
  animate_always_ = false;
  automap_ = NULL;
  lenshelp_ = NULL;
  fullbank_ = false;
  ignore_look_ = false;
  clothes_ = NULL;
  default_action_ = NULL;
  market_ = NULL;
  wrap_ = false;
  unwrap_ = false;
  topeffect_ = false;
  changedtoexpire_ = NULL;
  corpse_ = false;
  player_corpse_ = false;
  cyclopediaitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlags::~AppearanceFlags() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlags)
  SharedDtor();
}

void AppearanceFlags::SharedDtor() {
  if (this != default_instance_) {
    delete bank_;
    delete write_;
    delete write_once_;
    delete hook_;
    delete light_;
    delete shift_;
    delete height_;
    delete automap_;
    delete lenshelp_;
    delete clothes_;
    delete default_action_;
    delete market_;
    delete changedtoexpire_;
    delete cyclopediaitem_;
  }
}

void AppearanceFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlags_descriptor_;
}

const AppearanceFlags& AppearanceFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlags* AppearanceFlags::default_instance_ = NULL;

AppearanceFlags* AppearanceFlags::New() const {
  return new AppearanceFlags;
}

void AppearanceFlags::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppearanceFlags*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(clip_, forceuse_);
    if (has_bank()) {
      if (bank_ != NULL) bank_->::tibia::protobuf::appearances::AppearanceFlagBank::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(liquidpool_, avoid_);
    multiuse_ = false;
    if (has_write()) {
      if (write_ != NULL) write_->::tibia::protobuf::appearances::AppearanceFlagWrite::Clear();
    }
    if (has_write_once()) {
      if (write_once_ != NULL) write_once_->::tibia::protobuf::appearances::AppearanceFlagWriteOnce::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(no_movement_animation_, liquidcontainer_);
    ZR_(hang_, dont_hide_);
    if (has_hook()) {
      if (hook_ != NULL) hook_->::tibia::protobuf::appearances::AppearanceFlagHook::Clear();
    }
    if (has_light()) {
      if (light_ != NULL) light_->::tibia::protobuf::appearances::AppearanceFlagLight::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(translucent_, fullbank_);
    if (has_shift()) {
      if (shift_ != NULL) shift_->::tibia::protobuf::appearances::AppearanceFlagShift::Clear();
    }
    if (has_height()) {
      if (height_ != NULL) height_->::tibia::protobuf::appearances::AppearanceFlagHeight::Clear();
    }
    if (has_automap()) {
      if (automap_ != NULL) automap_->::tibia::protobuf::appearances::AppearanceFlagAutomap::Clear();
    }
    if (has_lenshelp()) {
      if (lenshelp_ != NULL) lenshelp_->::tibia::protobuf::appearances::AppearanceFlagLenshelp::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 127) {
    ZR_(wrap_, topeffect_);
    ignore_look_ = false;
    if (has_clothes()) {
      if (clothes_ != NULL) clothes_->::tibia::protobuf::appearances::AppearanceFlagClothes::Clear();
    }
    if (has_default_action()) {
      if (default_action_ != NULL) default_action_->::tibia::protobuf::appearances::AppearanceFlagDefaultAction::Clear();
    }
    if (has_market()) {
      if (market_ != NULL) market_->::tibia::protobuf::appearances::AppearanceFlagMarket::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 3840) {
    ZR_(corpse_, player_corpse_);
    if (has_changedtoexpire()) {
      if (changedtoexpire_ != NULL) changedtoexpire_->::tibia::protobuf::appearances::AppearanceFlagChangedToExpire::Clear();
    }
    if (has_cyclopediaitem()) {
      if (cyclopediaitem_ != NULL) cyclopediaitem_->::tibia::protobuf::appearances::AppearanceFlagCyclopedia::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  npcsaledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tibia.protobuf.appearances.AppearanceFlagBank bank = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clip;
        break;
      }

      // optional bool clip = 2;
      case 2: {
        if (tag == 16) {
         parse_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_)));
          set_has_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bottom;
        break;
      }

      // optional bool bottom = 3;
      case 3: {
        if (tag == 24) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_top;
        break;
      }

      // optional bool top = 4;
      case 4: {
        if (tag == 32) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_container;
        break;
      }

      // optional bool container = 5;
      case 5: {
        if (tag == 40) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cumulative;
        break;
      }

      // optional bool cumulative = 6;
      case 6: {
        if (tag == 48) {
         parse_cumulative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cumulative_)));
          set_has_cumulative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usable;
        break;
      }

      // optional bool usable = 7;
      case 7: {
        if (tag == 56) {
         parse_usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usable_)));
          set_has_usable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_forceuse;
        break;
      }

      // optional bool forceuse = 8;
      case 8: {
        if (tag == 64) {
         parse_forceuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forceuse_)));
          set_has_forceuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_multiuse;
        break;
      }

      // optional bool multiuse = 9;
      case 9: {
        if (tag == 72) {
         parse_multiuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiuse_)));
          set_has_multiuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_write;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagWrite write = 10;
      case 10: {
        if (tag == 82) {
         parse_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_write_once;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
      case 11: {
        if (tag == 90) {
         parse_write_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_liquidpool;
        break;
      }

      // optional bool liquidpool = 12;
      case 12: {
        if (tag == 96) {
         parse_liquidpool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &liquidpool_)));
          set_has_liquidpool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unpass;
        break;
      }

      // optional bool unpass = 13;
      case 13: {
        if (tag == 104) {
         parse_unpass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unpass_)));
          set_has_unpass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unmove;
        break;
      }

      // optional bool unmove = 14;
      case 14: {
        if (tag == 112) {
         parse_unmove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unmove_)));
          set_has_unmove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unsight;
        break;
      }

      // optional bool unsight = 15;
      case 15: {
        if (tag == 120) {
         parse_unsight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unsight_)));
          set_has_unsight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_avoid;
        break;
      }

      // optional bool avoid = 16;
      case 16: {
        if (tag == 128) {
         parse_avoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avoid_)));
          set_has_avoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_no_movement_animation;
        break;
      }

      // optional bool no_movement_animation = 17;
      case 17: {
        if (tag == 136) {
         parse_no_movement_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_movement_animation_)));
          set_has_no_movement_animation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_take;
        break;
      }

      // optional bool take = 18;
      case 18: {
        if (tag == 144) {
         parse_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &take_)));
          set_has_take();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_liquidcontainer;
        break;
      }

      // optional bool liquidcontainer = 19;
      case 19: {
        if (tag == 152) {
         parse_liquidcontainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &liquidcontainer_)));
          set_has_liquidcontainer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_hang;
        break;
      }

      // optional bool hang = 20;
      case 20: {
        if (tag == 160) {
         parse_hang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hang_)));
          set_has_hang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_hook;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagHook hook = 21;
      case 21: {
        if (tag == 170) {
         parse_hook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hook()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_rotate;
        break;
      }

      // optional bool rotate = 22;
      case 22: {
        if (tag == 176) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_light;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagLight light = 23;
      case 23: {
        if (tag == 186) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_dont_hide;
        break;
      }

      // optional bool dont_hide = 24;
      case 24: {
        if (tag == 192) {
         parse_dont_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dont_hide_)));
          set_has_dont_hide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_translucent;
        break;
      }

      // optional bool translucent = 25;
      case 25: {
        if (tag == 200) {
         parse_translucent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translucent_)));
          set_has_translucent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_shift;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagShift shift = 26;
      case 26: {
        if (tag == 210) {
         parse_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_height;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagHeight height = 27;
      case 27: {
        if (tag == 218) {
         parse_height:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_height()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_lying_object;
        break;
      }

      // optional bool lying_object = 28;
      case 28: {
        if (tag == 224) {
         parse_lying_object:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lying_object_)));
          set_has_lying_object();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_animate_always;
        break;
      }

      // optional bool animate_always = 29;
      case 29: {
        if (tag == 232) {
         parse_animate_always:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animate_always_)));
          set_has_animate_always();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_automap;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagAutomap automap = 30;
      case 30: {
        if (tag == 242) {
         parse_automap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_automap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_lenshelp;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
      case 31: {
        if (tag == 250) {
         parse_lenshelp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lenshelp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_fullbank;
        break;
      }

      // optional bool fullbank = 32;
      case 32: {
        if (tag == 256) {
         parse_fullbank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullbank_)));
          set_has_fullbank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_ignore_look;
        break;
      }

      // optional bool ignore_look = 33;
      case 33: {
        if (tag == 264) {
         parse_ignore_look:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_look_)));
          set_has_ignore_look();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_clothes;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagClothes clothes = 34;
      case 34: {
        if (tag == 274) {
         parse_clothes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clothes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_default_action;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
      case 35: {
        if (tag == 282) {
         parse_default_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_market;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagMarket market = 36;
      case 36: {
        if (tag == 290) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_wrap;
        break;
      }

      // optional bool wrap = 37;
      case 37: {
        if (tag == 296) {
         parse_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrap_)));
          set_has_wrap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_unwrap;
        break;
      }

      // optional bool unwrap = 38;
      case 38: {
        if (tag == 304) {
         parse_unwrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unwrap_)));
          set_has_unwrap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_topeffect;
        break;
      }

      // optional bool topeffect = 39;
      case 39: {
        if (tag == 312) {
         parse_topeffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &topeffect_)));
          set_has_topeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_npcsaledata;
        break;
      }

      // repeated .tibia.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
      case 40: {
        if (tag == 322) {
         parse_npcsaledata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcsaledata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_npcsaledata;
        if (input->ExpectTag(330)) goto parse_changedtoexpire;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
      case 41: {
        if (tag == 330) {
         parse_changedtoexpire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changedtoexpire()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_corpse;
        break;
      }

      // optional bool corpse = 42;
      case 42: {
        if (tag == 336) {
         parse_corpse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &corpse_)));
          set_has_corpse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_player_corpse;
        break;
      }

      // optional bool player_corpse = 43;
      case 43: {
        if (tag == 344) {
         parse_player_corpse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_corpse_)));
          set_has_player_corpse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_cyclopediaitem;
        break;
      }

      // optional .tibia.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
      case 44: {
        if (tag == 354) {
         parse_cyclopediaitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cyclopediaitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlags)
  return false;
#undef DO_
}

void AppearanceFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlags)
  // optional .tibia.protobuf.appearances.AppearanceFlagBank bank = 1;
  if (has_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bank(), output);
  }

  // optional bool clip = 2;
  if (has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clip(), output);
  }

  // optional bool bottom = 3;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bottom(), output);
  }

  // optional bool top = 4;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->top(), output);
  }

  // optional bool container = 5;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->container(), output);
  }

  // optional bool cumulative = 6;
  if (has_cumulative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cumulative(), output);
  }

  // optional bool usable = 7;
  if (has_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->usable(), output);
  }

  // optional bool forceuse = 8;
  if (has_forceuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->forceuse(), output);
  }

  // optional bool multiuse = 9;
  if (has_multiuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->multiuse(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagWrite write = 10;
  if (has_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->write(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
  if (has_write_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->write_once(), output);
  }

  // optional bool liquidpool = 12;
  if (has_liquidpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->liquidpool(), output);
  }

  // optional bool unpass = 13;
  if (has_unpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->unpass(), output);
  }

  // optional bool unmove = 14;
  if (has_unmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->unmove(), output);
  }

  // optional bool unsight = 15;
  if (has_unsight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->unsight(), output);
  }

  // optional bool avoid = 16;
  if (has_avoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->avoid(), output);
  }

  // optional bool no_movement_animation = 17;
  if (has_no_movement_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->no_movement_animation(), output);
  }

  // optional bool take = 18;
  if (has_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->take(), output);
  }

  // optional bool liquidcontainer = 19;
  if (has_liquidcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->liquidcontainer(), output);
  }

  // optional bool hang = 20;
  if (has_hang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->hang(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagHook hook = 21;
  if (has_hook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->hook(), output);
  }

  // optional bool rotate = 22;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->rotate(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagLight light = 23;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->light(), output);
  }

  // optional bool dont_hide = 24;
  if (has_dont_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->dont_hide(), output);
  }

  // optional bool translucent = 25;
  if (has_translucent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->translucent(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagShift shift = 26;
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->shift(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagHeight height = 27;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->height(), output);
  }

  // optional bool lying_object = 28;
  if (has_lying_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->lying_object(), output);
  }

  // optional bool animate_always = 29;
  if (has_animate_always()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->animate_always(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagAutomap automap = 30;
  if (has_automap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->automap(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
  if (has_lenshelp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->lenshelp(), output);
  }

  // optional bool fullbank = 32;
  if (has_fullbank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->fullbank(), output);
  }

  // optional bool ignore_look = 33;
  if (has_ignore_look()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->ignore_look(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagClothes clothes = 34;
  if (has_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->clothes(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
  if (has_default_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->default_action(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagMarket market = 36;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->market(), output);
  }

  // optional bool wrap = 37;
  if (has_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->wrap(), output);
  }

  // optional bool unwrap = 38;
  if (has_unwrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->unwrap(), output);
  }

  // optional bool topeffect = 39;
  if (has_topeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->topeffect(), output);
  }

  // repeated .tibia.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
  for (int i = 0; i < this->npcsaledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->npcsaledata(i), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
  if (has_changedtoexpire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->changedtoexpire(), output);
  }

  // optional bool corpse = 42;
  if (has_corpse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->corpse(), output);
  }

  // optional bool player_corpse = 43;
  if (has_player_corpse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->player_corpse(), output);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
  if (has_cyclopediaitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->cyclopediaitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlags)
}

::google::protobuf::uint8* AppearanceFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlags)
  // optional .tibia.protobuf.appearances.AppearanceFlagBank bank = 1;
  if (has_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bank(), target);
  }

  // optional bool clip = 2;
  if (has_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clip(), target);
  }

  // optional bool bottom = 3;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bottom(), target);
  }

  // optional bool top = 4;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->top(), target);
  }

  // optional bool container = 5;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->container(), target);
  }

  // optional bool cumulative = 6;
  if (has_cumulative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cumulative(), target);
  }

  // optional bool usable = 7;
  if (has_usable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->usable(), target);
  }

  // optional bool forceuse = 8;
  if (has_forceuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->forceuse(), target);
  }

  // optional bool multiuse = 9;
  if (has_multiuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->multiuse(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagWrite write = 10;
  if (has_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->write(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
  if (has_write_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->write_once(), target);
  }

  // optional bool liquidpool = 12;
  if (has_liquidpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->liquidpool(), target);
  }

  // optional bool unpass = 13;
  if (has_unpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->unpass(), target);
  }

  // optional bool unmove = 14;
  if (has_unmove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->unmove(), target);
  }

  // optional bool unsight = 15;
  if (has_unsight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->unsight(), target);
  }

  // optional bool avoid = 16;
  if (has_avoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->avoid(), target);
  }

  // optional bool no_movement_animation = 17;
  if (has_no_movement_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->no_movement_animation(), target);
  }

  // optional bool take = 18;
  if (has_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->take(), target);
  }

  // optional bool liquidcontainer = 19;
  if (has_liquidcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->liquidcontainer(), target);
  }

  // optional bool hang = 20;
  if (has_hang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->hang(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagHook hook = 21;
  if (has_hook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->hook(), target);
  }

  // optional bool rotate = 22;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->rotate(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagLight light = 23;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->light(), target);
  }

  // optional bool dont_hide = 24;
  if (has_dont_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->dont_hide(), target);
  }

  // optional bool translucent = 25;
  if (has_translucent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->translucent(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagShift shift = 26;
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->shift(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagHeight height = 27;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->height(), target);
  }

  // optional bool lying_object = 28;
  if (has_lying_object()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->lying_object(), target);
  }

  // optional bool animate_always = 29;
  if (has_animate_always()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->animate_always(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagAutomap automap = 30;
  if (has_automap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->automap(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
  if (has_lenshelp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->lenshelp(), target);
  }

  // optional bool fullbank = 32;
  if (has_fullbank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->fullbank(), target);
  }

  // optional bool ignore_look = 33;
  if (has_ignore_look()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->ignore_look(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagClothes clothes = 34;
  if (has_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->clothes(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
  if (has_default_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->default_action(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagMarket market = 36;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->market(), target);
  }

  // optional bool wrap = 37;
  if (has_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->wrap(), target);
  }

  // optional bool unwrap = 38;
  if (has_unwrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->unwrap(), target);
  }

  // optional bool topeffect = 39;
  if (has_topeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->topeffect(), target);
  }

  // repeated .tibia.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
  for (int i = 0; i < this->npcsaledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->npcsaledata(i), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
  if (has_changedtoexpire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->changedtoexpire(), target);
  }

  // optional bool corpse = 42;
  if (has_corpse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->corpse(), target);
  }

  // optional bool player_corpse = 43;
  if (has_player_corpse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->player_corpse(), target);
  }

  // optional .tibia.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
  if (has_cyclopediaitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->cyclopediaitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlags)
  return target;
}

int AppearanceFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tibia.protobuf.appearances.AppearanceFlagBank bank = 1;
    if (has_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank());
    }

    // optional bool clip = 2;
    if (has_clip()) {
      total_size += 1 + 1;
    }

    // optional bool bottom = 3;
    if (has_bottom()) {
      total_size += 1 + 1;
    }

    // optional bool top = 4;
    if (has_top()) {
      total_size += 1 + 1;
    }

    // optional bool container = 5;
    if (has_container()) {
      total_size += 1 + 1;
    }

    // optional bool cumulative = 6;
    if (has_cumulative()) {
      total_size += 1 + 1;
    }

    // optional bool usable = 7;
    if (has_usable()) {
      total_size += 1 + 1;
    }

    // optional bool forceuse = 8;
    if (has_forceuse()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool multiuse = 9;
    if (has_multiuse()) {
      total_size += 1 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagWrite write = 10;
    if (has_write()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
    if (has_write_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_once());
    }

    // optional bool liquidpool = 12;
    if (has_liquidpool()) {
      total_size += 1 + 1;
    }

    // optional bool unpass = 13;
    if (has_unpass()) {
      total_size += 1 + 1;
    }

    // optional bool unmove = 14;
    if (has_unmove()) {
      total_size += 1 + 1;
    }

    // optional bool unsight = 15;
    if (has_unsight()) {
      total_size += 1 + 1;
    }

    // optional bool avoid = 16;
    if (has_avoid()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool no_movement_animation = 17;
    if (has_no_movement_animation()) {
      total_size += 2 + 1;
    }

    // optional bool take = 18;
    if (has_take()) {
      total_size += 2 + 1;
    }

    // optional bool liquidcontainer = 19;
    if (has_liquidcontainer()) {
      total_size += 2 + 1;
    }

    // optional bool hang = 20;
    if (has_hang()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagHook hook = 21;
    if (has_hook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hook());
    }

    // optional bool rotate = 22;
    if (has_rotate()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagLight light = 23;
    if (has_light()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light());
    }

    // optional bool dont_hide = 24;
    if (has_dont_hide()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool translucent = 25;
    if (has_translucent()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagShift shift = 26;
    if (has_shift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shift());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagHeight height = 27;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->height());
    }

    // optional bool lying_object = 28;
    if (has_lying_object()) {
      total_size += 2 + 1;
    }

    // optional bool animate_always = 29;
    if (has_animate_always()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagAutomap automap = 30;
    if (has_automap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automap());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
    if (has_lenshelp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lenshelp());
    }

    // optional bool fullbank = 32;
    if (has_fullbank()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool ignore_look = 33;
    if (has_ignore_look()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagClothes clothes = 34;
    if (has_clothes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clothes());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
    if (has_default_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_action());
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagMarket market = 36;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market());
    }

    // optional bool wrap = 37;
    if (has_wrap()) {
      total_size += 2 + 1;
    }

    // optional bool unwrap = 38;
    if (has_unwrap()) {
      total_size += 2 + 1;
    }

    // optional bool topeffect = 39;
    if (has_topeffect()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .tibia.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
    if (has_changedtoexpire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changedtoexpire());
    }

    // optional bool corpse = 42;
    if (has_corpse()) {
      total_size += 2 + 1;
    }

    // optional bool player_corpse = 43;
    if (has_player_corpse()) {
      total_size += 2 + 1;
    }

    // optional .tibia.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
    if (has_cyclopediaitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cyclopediaitem());
    }

  }
  // repeated .tibia.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
  total_size += 2 * this->npcsaledata_size();
  for (int i = 0; i < this->npcsaledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcsaledata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlags::MergeFrom(const AppearanceFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcsaledata_.MergeFrom(from.npcsaledata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bank()) {
      mutable_bank()->::tibia::protobuf::appearances::AppearanceFlagBank::MergeFrom(from.bank());
    }
    if (from.has_clip()) {
      set_clip(from.clip());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_cumulative()) {
      set_cumulative(from.cumulative());
    }
    if (from.has_usable()) {
      set_usable(from.usable());
    }
    if (from.has_forceuse()) {
      set_forceuse(from.forceuse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multiuse()) {
      set_multiuse(from.multiuse());
    }
    if (from.has_write()) {
      mutable_write()->::tibia::protobuf::appearances::AppearanceFlagWrite::MergeFrom(from.write());
    }
    if (from.has_write_once()) {
      mutable_write_once()->::tibia::protobuf::appearances::AppearanceFlagWriteOnce::MergeFrom(from.write_once());
    }
    if (from.has_liquidpool()) {
      set_liquidpool(from.liquidpool());
    }
    if (from.has_unpass()) {
      set_unpass(from.unpass());
    }
    if (from.has_unmove()) {
      set_unmove(from.unmove());
    }
    if (from.has_unsight()) {
      set_unsight(from.unsight());
    }
    if (from.has_avoid()) {
      set_avoid(from.avoid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_no_movement_animation()) {
      set_no_movement_animation(from.no_movement_animation());
    }
    if (from.has_take()) {
      set_take(from.take());
    }
    if (from.has_liquidcontainer()) {
      set_liquidcontainer(from.liquidcontainer());
    }
    if (from.has_hang()) {
      set_hang(from.hang());
    }
    if (from.has_hook()) {
      mutable_hook()->::tibia::protobuf::appearances::AppearanceFlagHook::MergeFrom(from.hook());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
    if (from.has_light()) {
      mutable_light()->::tibia::protobuf::appearances::AppearanceFlagLight::MergeFrom(from.light());
    }
    if (from.has_dont_hide()) {
      set_dont_hide(from.dont_hide());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_translucent()) {
      set_translucent(from.translucent());
    }
    if (from.has_shift()) {
      mutable_shift()->::tibia::protobuf::appearances::AppearanceFlagShift::MergeFrom(from.shift());
    }
    if (from.has_height()) {
      mutable_height()->::tibia::protobuf::appearances::AppearanceFlagHeight::MergeFrom(from.height());
    }
    if (from.has_lying_object()) {
      set_lying_object(from.lying_object());
    }
    if (from.has_animate_always()) {
      set_animate_always(from.animate_always());
    }
    if (from.has_automap()) {
      mutable_automap()->::tibia::protobuf::appearances::AppearanceFlagAutomap::MergeFrom(from.automap());
    }
    if (from.has_lenshelp()) {
      mutable_lenshelp()->::tibia::protobuf::appearances::AppearanceFlagLenshelp::MergeFrom(from.lenshelp());
    }
    if (from.has_fullbank()) {
      set_fullbank(from.fullbank());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ignore_look()) {
      set_ignore_look(from.ignore_look());
    }
    if (from.has_clothes()) {
      mutable_clothes()->::tibia::protobuf::appearances::AppearanceFlagClothes::MergeFrom(from.clothes());
    }
    if (from.has_default_action()) {
      mutable_default_action()->::tibia::protobuf::appearances::AppearanceFlagDefaultAction::MergeFrom(from.default_action());
    }
    if (from.has_market()) {
      mutable_market()->::tibia::protobuf::appearances::AppearanceFlagMarket::MergeFrom(from.market());
    }
    if (from.has_wrap()) {
      set_wrap(from.wrap());
    }
    if (from.has_unwrap()) {
      set_unwrap(from.unwrap());
    }
    if (from.has_topeffect()) {
      set_topeffect(from.topeffect());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_changedtoexpire()) {
      mutable_changedtoexpire()->::tibia::protobuf::appearances::AppearanceFlagChangedToExpire::MergeFrom(from.changedtoexpire());
    }
    if (from.has_corpse()) {
      set_corpse(from.corpse());
    }
    if (from.has_player_corpse()) {
      set_player_corpse(from.player_corpse());
    }
    if (from.has_cyclopediaitem()) {
      mutable_cyclopediaitem()->::tibia::protobuf::appearances::AppearanceFlagCyclopedia::MergeFrom(from.cyclopediaitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlags::CopyFrom(const AppearanceFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlags::IsInitialized() const {

  return true;
}

void AppearanceFlags::Swap(AppearanceFlags* other) {
  if (other != this) {
    std::swap(bank_, other->bank_);
    std::swap(clip_, other->clip_);
    std::swap(bottom_, other->bottom_);
    std::swap(top_, other->top_);
    std::swap(container_, other->container_);
    std::swap(cumulative_, other->cumulative_);
    std::swap(usable_, other->usable_);
    std::swap(forceuse_, other->forceuse_);
    std::swap(multiuse_, other->multiuse_);
    std::swap(write_, other->write_);
    std::swap(write_once_, other->write_once_);
    std::swap(liquidpool_, other->liquidpool_);
    std::swap(unpass_, other->unpass_);
    std::swap(unmove_, other->unmove_);
    std::swap(unsight_, other->unsight_);
    std::swap(avoid_, other->avoid_);
    std::swap(no_movement_animation_, other->no_movement_animation_);
    std::swap(take_, other->take_);
    std::swap(liquidcontainer_, other->liquidcontainer_);
    std::swap(hang_, other->hang_);
    std::swap(hook_, other->hook_);
    std::swap(rotate_, other->rotate_);
    std::swap(light_, other->light_);
    std::swap(dont_hide_, other->dont_hide_);
    std::swap(translucent_, other->translucent_);
    std::swap(shift_, other->shift_);
    std::swap(height_, other->height_);
    std::swap(lying_object_, other->lying_object_);
    std::swap(animate_always_, other->animate_always_);
    std::swap(automap_, other->automap_);
    std::swap(lenshelp_, other->lenshelp_);
    std::swap(fullbank_, other->fullbank_);
    std::swap(ignore_look_, other->ignore_look_);
    std::swap(clothes_, other->clothes_);
    std::swap(default_action_, other->default_action_);
    std::swap(market_, other->market_);
    std::swap(wrap_, other->wrap_);
    std::swap(unwrap_, other->unwrap_);
    std::swap(topeffect_, other->topeffect_);
    npcsaledata_.Swap(&other->npcsaledata_);
    std::swap(changedtoexpire_, other->changedtoexpire_);
    std::swap(corpse_, other->corpse_);
    std::swap(player_corpse_, other->player_corpse_);
    std::swap(cyclopediaitem_, other->cyclopediaitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlags_descriptor_;
  metadata.reflection = AppearanceFlags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagBank::kWaypointsFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagBank::AppearanceFlagBank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagBank)
}

void AppearanceFlagBank::InitAsDefaultInstance() {
}

AppearanceFlagBank::AppearanceFlagBank(const AppearanceFlagBank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagBank)
}

void AppearanceFlagBank::SharedCtor() {
  _cached_size_ = 0;
  waypoints_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagBank::~AppearanceFlagBank() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagBank)
  SharedDtor();
}

void AppearanceFlagBank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagBank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagBank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagBank_descriptor_;
}

const AppearanceFlagBank& AppearanceFlagBank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagBank* AppearanceFlagBank::default_instance_ = NULL;

AppearanceFlagBank* AppearanceFlagBank::New() const {
  return new AppearanceFlagBank;
}

void AppearanceFlagBank::Clear() {
  waypoints_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagBank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagBank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 waypoints = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoints_)));
          set_has_waypoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagBank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagBank)
  return false;
#undef DO_
}

void AppearanceFlagBank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagBank)
  // optional uint32 waypoints = 1;
  if (has_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->waypoints(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagBank)
}

::google::protobuf::uint8* AppearanceFlagBank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagBank)
  // optional uint32 waypoints = 1;
  if (has_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->waypoints(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagBank)
  return target;
}

int AppearanceFlagBank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 waypoints = 1;
    if (has_waypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waypoints());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagBank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagBank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagBank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagBank::MergeFrom(const AppearanceFlagBank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_waypoints()) {
      set_waypoints(from.waypoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagBank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagBank::CopyFrom(const AppearanceFlagBank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagBank::IsInitialized() const {

  return true;
}

void AppearanceFlagBank::Swap(AppearanceFlagBank* other) {
  if (other != this) {
    std::swap(waypoints_, other->waypoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagBank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagBank_descriptor_;
  metadata.reflection = AppearanceFlagBank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagWrite::kMaxTextLengthFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagWrite::AppearanceFlagWrite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagWrite)
}

void AppearanceFlagWrite::InitAsDefaultInstance() {
}

AppearanceFlagWrite::AppearanceFlagWrite(const AppearanceFlagWrite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagWrite)
}

void AppearanceFlagWrite::SharedCtor() {
  _cached_size_ = 0;
  max_text_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagWrite::~AppearanceFlagWrite() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagWrite)
  SharedDtor();
}

void AppearanceFlagWrite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagWrite_descriptor_;
}

const AppearanceFlagWrite& AppearanceFlagWrite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagWrite* AppearanceFlagWrite::default_instance_ = NULL;

AppearanceFlagWrite* AppearanceFlagWrite::New() const {
  return new AppearanceFlagWrite;
}

void AppearanceFlagWrite::Clear() {
  max_text_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_text_length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_text_length_)));
          set_has_max_text_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagWrite)
  return false;
#undef DO_
}

void AppearanceFlagWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagWrite)
  // optional uint32 max_text_length = 1;
  if (has_max_text_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_text_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagWrite)
}

::google::protobuf::uint8* AppearanceFlagWrite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagWrite)
  // optional uint32 max_text_length = 1;
  if (has_max_text_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_text_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagWrite)
  return target;
}

int AppearanceFlagWrite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_text_length = 1;
    if (has_max_text_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_text_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagWrite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagWrite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagWrite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagWrite::MergeFrom(const AppearanceFlagWrite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_text_length()) {
      set_max_text_length(from.max_text_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagWrite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagWrite::CopyFrom(const AppearanceFlagWrite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagWrite::IsInitialized() const {

  return true;
}

void AppearanceFlagWrite::Swap(AppearanceFlagWrite* other) {
  if (other != this) {
    std::swap(max_text_length_, other->max_text_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagWrite_descriptor_;
  metadata.reflection = AppearanceFlagWrite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagWriteOnce::kMaxTextLengthOnceFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagWriteOnce::AppearanceFlagWriteOnce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
}

void AppearanceFlagWriteOnce::InitAsDefaultInstance() {
}

AppearanceFlagWriteOnce::AppearanceFlagWriteOnce(const AppearanceFlagWriteOnce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
}

void AppearanceFlagWriteOnce::SharedCtor() {
  _cached_size_ = 0;
  max_text_length_once_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagWriteOnce::~AppearanceFlagWriteOnce() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  SharedDtor();
}

void AppearanceFlagWriteOnce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagWriteOnce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagWriteOnce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagWriteOnce_descriptor_;
}

const AppearanceFlagWriteOnce& AppearanceFlagWriteOnce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagWriteOnce* AppearanceFlagWriteOnce::default_instance_ = NULL;

AppearanceFlagWriteOnce* AppearanceFlagWriteOnce::New() const {
  return new AppearanceFlagWriteOnce;
}

void AppearanceFlagWriteOnce::Clear() {
  max_text_length_once_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagWriteOnce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_text_length_once = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_text_length_once_)));
          set_has_max_text_length_once();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  return false;
#undef DO_
}

void AppearanceFlagWriteOnce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  // optional uint32 max_text_length_once = 1;
  if (has_max_text_length_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_text_length_once(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
}

::google::protobuf::uint8* AppearanceFlagWriteOnce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  // optional uint32 max_text_length_once = 1;
  if (has_max_text_length_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_text_length_once(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagWriteOnce)
  return target;
}

int AppearanceFlagWriteOnce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_text_length_once = 1;
    if (has_max_text_length_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_text_length_once());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagWriteOnce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagWriteOnce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagWriteOnce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagWriteOnce::MergeFrom(const AppearanceFlagWriteOnce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_text_length_once()) {
      set_max_text_length_once(from.max_text_length_once());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagWriteOnce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagWriteOnce::CopyFrom(const AppearanceFlagWriteOnce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagWriteOnce::IsInitialized() const {

  return true;
}

void AppearanceFlagWriteOnce::Swap(AppearanceFlagWriteOnce* other) {
  if (other != this) {
    std::swap(max_text_length_once_, other->max_text_length_once_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagWriteOnce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagWriteOnce_descriptor_;
  metadata.reflection = AppearanceFlagWriteOnce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagLight::kBrightnessFieldNumber;
const int AppearanceFlagLight::kColorFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagLight::AppearanceFlagLight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagLight)
}

void AppearanceFlagLight::InitAsDefaultInstance() {
}

AppearanceFlagLight::AppearanceFlagLight(const AppearanceFlagLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagLight)
}

void AppearanceFlagLight::SharedCtor() {
  _cached_size_ = 0;
  brightness_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagLight::~AppearanceFlagLight() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagLight)
  SharedDtor();
}

void AppearanceFlagLight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagLight_descriptor_;
}

const AppearanceFlagLight& AppearanceFlagLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagLight* AppearanceFlagLight::default_instance_ = NULL;

AppearanceFlagLight* AppearanceFlagLight::New() const {
  return new AppearanceFlagLight;
}

void AppearanceFlagLight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppearanceFlagLight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(brightness_, color_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 brightness = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagLight)
  return false;
#undef DO_
}

void AppearanceFlagLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagLight)
  // optional uint32 brightness = 1;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->brightness(), output);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagLight)
}

::google::protobuf::uint8* AppearanceFlagLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagLight)
  // optional uint32 brightness = 1;
  if (has_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->brightness(), target);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagLight)
  return target;
}

int AppearanceFlagLight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 brightness = 1;
    if (has_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brightness());
    }

    // optional uint32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagLight::MergeFrom(const AppearanceFlagLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagLight::CopyFrom(const AppearanceFlagLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagLight::IsInitialized() const {

  return true;
}

void AppearanceFlagLight::Swap(AppearanceFlagLight* other) {
  if (other != this) {
    std::swap(brightness_, other->brightness_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagLight_descriptor_;
  metadata.reflection = AppearanceFlagLight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagHeight::kElevationFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagHeight::AppearanceFlagHeight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagHeight)
}

void AppearanceFlagHeight::InitAsDefaultInstance() {
}

AppearanceFlagHeight::AppearanceFlagHeight(const AppearanceFlagHeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagHeight)
}

void AppearanceFlagHeight::SharedCtor() {
  _cached_size_ = 0;
  elevation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagHeight::~AppearanceFlagHeight() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagHeight)
  SharedDtor();
}

void AppearanceFlagHeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagHeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagHeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagHeight_descriptor_;
}

const AppearanceFlagHeight& AppearanceFlagHeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagHeight* AppearanceFlagHeight::default_instance_ = NULL;

AppearanceFlagHeight* AppearanceFlagHeight::New() const {
  return new AppearanceFlagHeight;
}

void AppearanceFlagHeight::Clear() {
  elevation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagHeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagHeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 elevation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagHeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagHeight)
  return false;
#undef DO_
}

void AppearanceFlagHeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagHeight)
  // optional uint32 elevation = 1;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elevation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagHeight)
}

::google::protobuf::uint8* AppearanceFlagHeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagHeight)
  // optional uint32 elevation = 1;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->elevation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagHeight)
  return target;
}

int AppearanceFlagHeight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 elevation = 1;
    if (has_elevation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elevation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagHeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagHeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagHeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagHeight::MergeFrom(const AppearanceFlagHeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagHeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagHeight::CopyFrom(const AppearanceFlagHeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagHeight::IsInitialized() const {

  return true;
}

void AppearanceFlagHeight::Swap(AppearanceFlagHeight* other) {
  if (other != this) {
    std::swap(elevation_, other->elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagHeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagHeight_descriptor_;
  metadata.reflection = AppearanceFlagHeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagShift::kXFieldNumber;
const int AppearanceFlagShift::kYFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagShift::AppearanceFlagShift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagShift)
}

void AppearanceFlagShift::InitAsDefaultInstance() {
}

AppearanceFlagShift::AppearanceFlagShift(const AppearanceFlagShift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagShift)
}

void AppearanceFlagShift::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagShift::~AppearanceFlagShift() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagShift)
  SharedDtor();
}

void AppearanceFlagShift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagShift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagShift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagShift_descriptor_;
}

const AppearanceFlagShift& AppearanceFlagShift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagShift* AppearanceFlagShift::default_instance_ = NULL;

AppearanceFlagShift* AppearanceFlagShift::New() const {
  return new AppearanceFlagShift;
}

void AppearanceFlagShift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppearanceFlagShift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagShift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagShift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagShift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagShift)
  return false;
#undef DO_
}

void AppearanceFlagShift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagShift)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagShift)
}

::google::protobuf::uint8* AppearanceFlagShift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagShift)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagShift)
  return target;
}

int AppearanceFlagShift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagShift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagShift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagShift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagShift::MergeFrom(const AppearanceFlagShift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagShift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagShift::CopyFrom(const AppearanceFlagShift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagShift::IsInitialized() const {

  return true;
}

void AppearanceFlagShift::Swap(AppearanceFlagShift* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagShift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagShift_descriptor_;
  metadata.reflection = AppearanceFlagShift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagClothes::kSlotFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagClothes::AppearanceFlagClothes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagClothes)
}

void AppearanceFlagClothes::InitAsDefaultInstance() {
}

AppearanceFlagClothes::AppearanceFlagClothes(const AppearanceFlagClothes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagClothes)
}

void AppearanceFlagClothes::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagClothes::~AppearanceFlagClothes() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagClothes)
  SharedDtor();
}

void AppearanceFlagClothes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagClothes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagClothes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagClothes_descriptor_;
}

const AppearanceFlagClothes& AppearanceFlagClothes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagClothes* AppearanceFlagClothes::default_instance_ = NULL;

AppearanceFlagClothes* AppearanceFlagClothes::New() const {
  return new AppearanceFlagClothes;
}

void AppearanceFlagClothes::Clear() {
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagClothes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagClothes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagClothes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagClothes)
  return false;
#undef DO_
}

void AppearanceFlagClothes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagClothes)
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagClothes)
}

::google::protobuf::uint8* AppearanceFlagClothes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagClothes)
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagClothes)
  return target;
}

int AppearanceFlagClothes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagClothes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagClothes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagClothes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagClothes::MergeFrom(const AppearanceFlagClothes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagClothes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagClothes::CopyFrom(const AppearanceFlagClothes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagClothes::IsInitialized() const {

  return true;
}

void AppearanceFlagClothes::Swap(AppearanceFlagClothes* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagClothes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagClothes_descriptor_;
  metadata.reflection = AppearanceFlagClothes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagDefaultAction::kActionFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagDefaultAction::AppearanceFlagDefaultAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
}

void AppearanceFlagDefaultAction::InitAsDefaultInstance() {
}

AppearanceFlagDefaultAction::AppearanceFlagDefaultAction(const AppearanceFlagDefaultAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
}

void AppearanceFlagDefaultAction::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagDefaultAction::~AppearanceFlagDefaultAction() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  SharedDtor();
}

void AppearanceFlagDefaultAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagDefaultAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagDefaultAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagDefaultAction_descriptor_;
}

const AppearanceFlagDefaultAction& AppearanceFlagDefaultAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagDefaultAction* AppearanceFlagDefaultAction::default_instance_ = NULL;

AppearanceFlagDefaultAction* AppearanceFlagDefaultAction::New() const {
  return new AppearanceFlagDefaultAction;
}

void AppearanceFlagDefaultAction::Clear() {
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagDefaultAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tibia.protobuf.shared.PLAYER_ACTION action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::shared::PLAYER_ACTION_IsValid(value)) {
            set_action(static_cast< ::tibia::protobuf::shared::PLAYER_ACTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  return false;
#undef DO_
}

void AppearanceFlagDefaultAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  // optional .tibia.protobuf.shared.PLAYER_ACTION action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
}

::google::protobuf::uint8* AppearanceFlagDefaultAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  // optional .tibia.protobuf.shared.PLAYER_ACTION action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagDefaultAction)
  return target;
}

int AppearanceFlagDefaultAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tibia.protobuf.shared.PLAYER_ACTION action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagDefaultAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagDefaultAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagDefaultAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagDefaultAction::MergeFrom(const AppearanceFlagDefaultAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagDefaultAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagDefaultAction::CopyFrom(const AppearanceFlagDefaultAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagDefaultAction::IsInitialized() const {

  return true;
}

void AppearanceFlagDefaultAction::Swap(AppearanceFlagDefaultAction* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagDefaultAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagDefaultAction_descriptor_;
  metadata.reflection = AppearanceFlagDefaultAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagMarket::kCategoryFieldNumber;
const int AppearanceFlagMarket::kTradeAsObjectIdFieldNumber;
const int AppearanceFlagMarket::kShowAsObjectIdFieldNumber;
const int AppearanceFlagMarket::kRestrictToProfessionFieldNumber;
const int AppearanceFlagMarket::kMinimumLevelFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagMarket::AppearanceFlagMarket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagMarket)
}

void AppearanceFlagMarket::InitAsDefaultInstance() {
}

AppearanceFlagMarket::AppearanceFlagMarket(const AppearanceFlagMarket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagMarket)
}

void AppearanceFlagMarket::SharedCtor() {
  _cached_size_ = 0;
  category_ = 1;
  trade_as_object_id_ = 0u;
  show_as_object_id_ = 0u;
  minimum_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagMarket::~AppearanceFlagMarket() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagMarket)
  SharedDtor();
}

void AppearanceFlagMarket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagMarket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagMarket_descriptor_;
}

const AppearanceFlagMarket& AppearanceFlagMarket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagMarket* AppearanceFlagMarket::default_instance_ = NULL;

AppearanceFlagMarket* AppearanceFlagMarket::New() const {
  return new AppearanceFlagMarket;
}

void AppearanceFlagMarket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppearanceFlagMarket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(show_as_object_id_, minimum_level_);
    category_ = 1;
    trade_as_object_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  restrict_to_profession_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagMarket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tibia.protobuf.shared.ITEM_CATEGORY category = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::shared::ITEM_CATEGORY_IsValid(value)) {
            set_category(static_cast< ::tibia::protobuf::shared::ITEM_CATEGORY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trade_as_object_id;
        break;
      }

      // optional uint32 trade_as_object_id = 2;
      case 2: {
        if (tag == 16) {
         parse_trade_as_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_as_object_id_)));
          set_has_trade_as_object_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_show_as_object_id;
        break;
      }

      // optional uint32 show_as_object_id = 3;
      case 3: {
        if (tag == 24) {
         parse_show_as_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_as_object_id_)));
          set_has_show_as_object_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_restrict_to_profession;
        break;
      }

      // repeated .tibia.protobuf.shared.PLAYER_PROFESSION restrict_to_profession = 5;
      case 5: {
        if (tag == 40) {
         parse_restrict_to_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::shared::PLAYER_PROFESSION_IsValid(value)) {
            add_restrict_to_profession(static_cast< ::tibia::protobuf::shared::PLAYER_PROFESSION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::tibia::protobuf::shared::PLAYER_PROFESSION_IsValid,
                 this->mutable_restrict_to_profession())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_restrict_to_profession;
        if (input->ExpectTag(48)) goto parse_minimum_level;
        break;
      }

      // optional uint32 minimum_level = 6;
      case 6: {
        if (tag == 48) {
         parse_minimum_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimum_level_)));
          set_has_minimum_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagMarket)
  return false;
#undef DO_
}

void AppearanceFlagMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagMarket)
  // optional .tibia.protobuf.shared.ITEM_CATEGORY category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  // optional uint32 trade_as_object_id = 2;
  if (has_trade_as_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trade_as_object_id(), output);
  }

  // optional uint32 show_as_object_id = 3;
  if (has_show_as_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->show_as_object_id(), output);
  }

  // repeated .tibia.protobuf.shared.PLAYER_PROFESSION restrict_to_profession = 5;
  for (int i = 0; i < this->restrict_to_profession_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->restrict_to_profession(i), output);
  }

  // optional uint32 minimum_level = 6;
  if (has_minimum_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->minimum_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagMarket)
}

::google::protobuf::uint8* AppearanceFlagMarket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagMarket)
  // optional .tibia.protobuf.shared.ITEM_CATEGORY category = 1;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->category(), target);
  }

  // optional uint32 trade_as_object_id = 2;
  if (has_trade_as_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trade_as_object_id(), target);
  }

  // optional uint32 show_as_object_id = 3;
  if (has_show_as_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->show_as_object_id(), target);
  }

  // repeated .tibia.protobuf.shared.PLAYER_PROFESSION restrict_to_profession = 5;
  for (int i = 0; i < this->restrict_to_profession_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->restrict_to_profession(i), target);
  }

  // optional uint32 minimum_level = 6;
  if (has_minimum_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->minimum_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagMarket)
  return target;
}

int AppearanceFlagMarket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tibia.protobuf.shared.ITEM_CATEGORY category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional uint32 trade_as_object_id = 2;
    if (has_trade_as_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_as_object_id());
    }

    // optional uint32 show_as_object_id = 3;
    if (has_show_as_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_as_object_id());
    }

    // optional uint32 minimum_level = 6;
    if (has_minimum_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimum_level());
    }

  }
  // repeated .tibia.protobuf.shared.PLAYER_PROFESSION restrict_to_profession = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->restrict_to_profession_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->restrict_to_profession(i));
    }
    total_size += 1 * this->restrict_to_profession_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagMarket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagMarket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagMarket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagMarket::MergeFrom(const AppearanceFlagMarket& from) {
  GOOGLE_CHECK_NE(&from, this);
  restrict_to_profession_.MergeFrom(from.restrict_to_profession_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_trade_as_object_id()) {
      set_trade_as_object_id(from.trade_as_object_id());
    }
    if (from.has_show_as_object_id()) {
      set_show_as_object_id(from.show_as_object_id());
    }
    if (from.has_minimum_level()) {
      set_minimum_level(from.minimum_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagMarket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagMarket::CopyFrom(const AppearanceFlagMarket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagMarket::IsInitialized() const {

  return true;
}

void AppearanceFlagMarket::Swap(AppearanceFlagMarket* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    std::swap(trade_as_object_id_, other->trade_as_object_id_);
    std::swap(show_as_object_id_, other->show_as_object_id_);
    restrict_to_profession_.Swap(&other->restrict_to_profession_);
    std::swap(minimum_level_, other->minimum_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagMarket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagMarket_descriptor_;
  metadata.reflection = AppearanceFlagMarket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagNPC::kNameFieldNumber;
const int AppearanceFlagNPC::kLocationFieldNumber;
const int AppearanceFlagNPC::kSalePriceFieldNumber;
const int AppearanceFlagNPC::kBuyPriceFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagNPC::AppearanceFlagNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagNPC)
}

void AppearanceFlagNPC::InitAsDefaultInstance() {
}

AppearanceFlagNPC::AppearanceFlagNPC(const AppearanceFlagNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagNPC)
}

void AppearanceFlagNPC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sale_price_ = 0u;
  buy_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagNPC::~AppearanceFlagNPC() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagNPC)
  SharedDtor();
}

void AppearanceFlagNPC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void AppearanceFlagNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagNPC_descriptor_;
}

const AppearanceFlagNPC& AppearanceFlagNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagNPC* AppearanceFlagNPC::default_instance_ = NULL;

AppearanceFlagNPC* AppearanceFlagNPC::New() const {
  return new AppearanceFlagNPC;
}

void AppearanceFlagNPC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppearanceFlagNPC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sale_price_, buy_price_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagNPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // optional string location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sale_price;
        break;
      }

      // optional uint32 sale_price = 3;
      case 3: {
        if (tag == 24) {
         parse_sale_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sale_price_)));
          set_has_sale_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buy_price;
        break;
      }

      // optional uint32 buy_price = 4;
      case 4: {
        if (tag == 32) {
         parse_buy_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price_)));
          set_has_buy_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagNPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagNPC)
  return false;
#undef DO_
}

void AppearanceFlagNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagNPC)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // optional uint32 sale_price = 3;
  if (has_sale_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sale_price(), output);
  }

  // optional uint32 buy_price = 4;
  if (has_buy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagNPC)
}

::google::protobuf::uint8* AppearanceFlagNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagNPC)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }

  // optional uint32 sale_price = 3;
  if (has_sale_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sale_price(), target);
  }

  // optional uint32 buy_price = 4;
  if (has_buy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagNPC)
  return target;
}

int AppearanceFlagNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional uint32 sale_price = 3;
    if (has_sale_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sale_price());
    }

    // optional uint32 buy_price = 4;
    if (has_buy_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagNPC::MergeFrom(const AppearanceFlagNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_sale_price()) {
      set_sale_price(from.sale_price());
    }
    if (from.has_buy_price()) {
      set_buy_price(from.buy_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagNPC::CopyFrom(const AppearanceFlagNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagNPC::IsInitialized() const {

  return true;
}

void AppearanceFlagNPC::Swap(AppearanceFlagNPC* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(location_, other->location_);
    std::swap(sale_price_, other->sale_price_);
    std::swap(buy_price_, other->buy_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagNPC_descriptor_;
  metadata.reflection = AppearanceFlagNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagAutomap::kColorFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagAutomap::AppearanceFlagAutomap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagAutomap)
}

void AppearanceFlagAutomap::InitAsDefaultInstance() {
}

AppearanceFlagAutomap::AppearanceFlagAutomap(const AppearanceFlagAutomap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagAutomap)
}

void AppearanceFlagAutomap::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagAutomap::~AppearanceFlagAutomap() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagAutomap)
  SharedDtor();
}

void AppearanceFlagAutomap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagAutomap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagAutomap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagAutomap_descriptor_;
}

const AppearanceFlagAutomap& AppearanceFlagAutomap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagAutomap* AppearanceFlagAutomap::default_instance_ = NULL;

AppearanceFlagAutomap* AppearanceFlagAutomap::New() const {
  return new AppearanceFlagAutomap;
}

void AppearanceFlagAutomap::Clear() {
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagAutomap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagAutomap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagAutomap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagAutomap)
  return false;
#undef DO_
}

void AppearanceFlagAutomap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagAutomap)
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagAutomap)
}

::google::protobuf::uint8* AppearanceFlagAutomap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagAutomap)
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagAutomap)
  return target;
}

int AppearanceFlagAutomap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagAutomap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagAutomap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagAutomap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagAutomap::MergeFrom(const AppearanceFlagAutomap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagAutomap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagAutomap::CopyFrom(const AppearanceFlagAutomap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagAutomap::IsInitialized() const {

  return true;
}

void AppearanceFlagAutomap::Swap(AppearanceFlagAutomap* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagAutomap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagAutomap_descriptor_;
  metadata.reflection = AppearanceFlagAutomap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagHook::kDirectionFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagHook::AppearanceFlagHook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagHook)
}

void AppearanceFlagHook::InitAsDefaultInstance() {
}

AppearanceFlagHook::AppearanceFlagHook(const AppearanceFlagHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagHook)
}

void AppearanceFlagHook::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagHook::~AppearanceFlagHook() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagHook)
  SharedDtor();
}

void AppearanceFlagHook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagHook_descriptor_;
}

const AppearanceFlagHook& AppearanceFlagHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagHook* AppearanceFlagHook::default_instance_ = NULL;

AppearanceFlagHook* AppearanceFlagHook::New() const {
  return new AppearanceFlagHook;
}

void AppearanceFlagHook::Clear() {
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagHook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tibia.protobuf.shared.HOOK_TYPE direction = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tibia::protobuf::shared::HOOK_TYPE_IsValid(value)) {
            set_direction(static_cast< ::tibia::protobuf::shared::HOOK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagHook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagHook)
  return false;
#undef DO_
}

void AppearanceFlagHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagHook)
  // optional .tibia.protobuf.shared.HOOK_TYPE direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagHook)
}

::google::protobuf::uint8* AppearanceFlagHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagHook)
  // optional .tibia.protobuf.shared.HOOK_TYPE direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagHook)
  return target;
}

int AppearanceFlagHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tibia.protobuf.shared.HOOK_TYPE direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagHook::MergeFrom(const AppearanceFlagHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagHook::CopyFrom(const AppearanceFlagHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagHook::IsInitialized() const {

  return true;
}

void AppearanceFlagHook::Swap(AppearanceFlagHook* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagHook_descriptor_;
  metadata.reflection = AppearanceFlagHook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagLenshelp::kIdFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagLenshelp::AppearanceFlagLenshelp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagLenshelp)
}

void AppearanceFlagLenshelp::InitAsDefaultInstance() {
}

AppearanceFlagLenshelp::AppearanceFlagLenshelp(const AppearanceFlagLenshelp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagLenshelp)
}

void AppearanceFlagLenshelp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagLenshelp::~AppearanceFlagLenshelp() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  SharedDtor();
}

void AppearanceFlagLenshelp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagLenshelp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagLenshelp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagLenshelp_descriptor_;
}

const AppearanceFlagLenshelp& AppearanceFlagLenshelp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagLenshelp* AppearanceFlagLenshelp::default_instance_ = NULL;

AppearanceFlagLenshelp* AppearanceFlagLenshelp::New() const {
  return new AppearanceFlagLenshelp;
}

void AppearanceFlagLenshelp::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagLenshelp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  return false;
#undef DO_
}

void AppearanceFlagLenshelp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagLenshelp)
}

::google::protobuf::uint8* AppearanceFlagLenshelp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagLenshelp)
  return target;
}

int AppearanceFlagLenshelp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagLenshelp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagLenshelp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagLenshelp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagLenshelp::MergeFrom(const AppearanceFlagLenshelp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagLenshelp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagLenshelp::CopyFrom(const AppearanceFlagLenshelp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagLenshelp::IsInitialized() const {

  return true;
}

void AppearanceFlagLenshelp::Swap(AppearanceFlagLenshelp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagLenshelp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagLenshelp_descriptor_;
  metadata.reflection = AppearanceFlagLenshelp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagChangedToExpire::kFormerObjectTypeidFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagChangedToExpire::AppearanceFlagChangedToExpire()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
}

void AppearanceFlagChangedToExpire::InitAsDefaultInstance() {
}

AppearanceFlagChangedToExpire::AppearanceFlagChangedToExpire(const AppearanceFlagChangedToExpire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
}

void AppearanceFlagChangedToExpire::SharedCtor() {
  _cached_size_ = 0;
  former_object_typeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagChangedToExpire::~AppearanceFlagChangedToExpire() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  SharedDtor();
}

void AppearanceFlagChangedToExpire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagChangedToExpire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagChangedToExpire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagChangedToExpire_descriptor_;
}

const AppearanceFlagChangedToExpire& AppearanceFlagChangedToExpire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagChangedToExpire* AppearanceFlagChangedToExpire::default_instance_ = NULL;

AppearanceFlagChangedToExpire* AppearanceFlagChangedToExpire::New() const {
  return new AppearanceFlagChangedToExpire;
}

void AppearanceFlagChangedToExpire::Clear() {
  former_object_typeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagChangedToExpire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 former_object_typeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &former_object_typeid_)));
          set_has_former_object_typeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  return false;
#undef DO_
}

void AppearanceFlagChangedToExpire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  // optional uint32 former_object_typeid = 1;
  if (has_former_object_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->former_object_typeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
}

::google::protobuf::uint8* AppearanceFlagChangedToExpire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  // optional uint32 former_object_typeid = 1;
  if (has_former_object_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->former_object_typeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagChangedToExpire)
  return target;
}

int AppearanceFlagChangedToExpire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 former_object_typeid = 1;
    if (has_former_object_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->former_object_typeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagChangedToExpire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagChangedToExpire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagChangedToExpire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagChangedToExpire::MergeFrom(const AppearanceFlagChangedToExpire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_former_object_typeid()) {
      set_former_object_typeid(from.former_object_typeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagChangedToExpire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagChangedToExpire::CopyFrom(const AppearanceFlagChangedToExpire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagChangedToExpire::IsInitialized() const {

  return true;
}

void AppearanceFlagChangedToExpire::Swap(AppearanceFlagChangedToExpire* other) {
  if (other != this) {
    std::swap(former_object_typeid_, other->former_object_typeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagChangedToExpire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagChangedToExpire_descriptor_;
  metadata.reflection = AppearanceFlagChangedToExpire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceFlagCyclopedia::kCyclopediaTypeFieldNumber;
#endif  // !_MSC_VER

AppearanceFlagCyclopedia::AppearanceFlagCyclopedia()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
}

void AppearanceFlagCyclopedia::InitAsDefaultInstance() {
}

AppearanceFlagCyclopedia::AppearanceFlagCyclopedia(const AppearanceFlagCyclopedia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
}

void AppearanceFlagCyclopedia::SharedCtor() {
  _cached_size_ = 0;
  cyclopedia_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFlagCyclopedia::~AppearanceFlagCyclopedia() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  SharedDtor();
}

void AppearanceFlagCyclopedia::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFlagCyclopedia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFlagCyclopedia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFlagCyclopedia_descriptor_;
}

const AppearanceFlagCyclopedia& AppearanceFlagCyclopedia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

AppearanceFlagCyclopedia* AppearanceFlagCyclopedia::default_instance_ = NULL;

AppearanceFlagCyclopedia* AppearanceFlagCyclopedia::New() const {
  return new AppearanceFlagCyclopedia;
}

void AppearanceFlagCyclopedia::Clear() {
  cyclopedia_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFlagCyclopedia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cyclopedia_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cyclopedia_type_)));
          set_has_cyclopedia_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  return false;
#undef DO_
}

void AppearanceFlagCyclopedia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  // optional uint32 cyclopedia_type = 1;
  if (has_cyclopedia_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cyclopedia_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
}

::google::protobuf::uint8* AppearanceFlagCyclopedia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  // optional uint32 cyclopedia_type = 1;
  if (has_cyclopedia_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cyclopedia_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.AppearanceFlagCyclopedia)
  return target;
}

int AppearanceFlagCyclopedia::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cyclopedia_type = 1;
    if (has_cyclopedia_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cyclopedia_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFlagCyclopedia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFlagCyclopedia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFlagCyclopedia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFlagCyclopedia::MergeFrom(const AppearanceFlagCyclopedia& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cyclopedia_type()) {
      set_cyclopedia_type(from.cyclopedia_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFlagCyclopedia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagCyclopedia::CopyFrom(const AppearanceFlagCyclopedia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagCyclopedia::IsInitialized() const {

  return true;
}

void AppearanceFlagCyclopedia::Swap(AppearanceFlagCyclopedia* other) {
  if (other != this) {
    std::swap(cyclopedia_type_, other->cyclopedia_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFlagCyclopedia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFlagCyclopedia_descriptor_;
  metadata.reflection = AppearanceFlagCyclopedia_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialMeaningAppearanceIds::kGoldCoinIdFieldNumber;
const int SpecialMeaningAppearanceIds::kPlatinumCoinIdFieldNumber;
const int SpecialMeaningAppearanceIds::kCrystalCoinIdFieldNumber;
const int SpecialMeaningAppearanceIds::kTibiaCoinIdFieldNumber;
const int SpecialMeaningAppearanceIds::kStampedLetterIdFieldNumber;
const int SpecialMeaningAppearanceIds::kSupplyStashIdFieldNumber;
#endif  // !_MSC_VER

SpecialMeaningAppearanceIds::SpecialMeaningAppearanceIds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
}

void SpecialMeaningAppearanceIds::InitAsDefaultInstance() {
}

SpecialMeaningAppearanceIds::SpecialMeaningAppearanceIds(const SpecialMeaningAppearanceIds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
}

void SpecialMeaningAppearanceIds::SharedCtor() {
  _cached_size_ = 0;
  gold_coin_id_ = 0u;
  platinum_coin_id_ = 0u;
  crystal_coin_id_ = 0u;
  tibia_coin_id_ = 0u;
  stamped_letter_id_ = 0u;
  supply_stash_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialMeaningAppearanceIds::~SpecialMeaningAppearanceIds() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  SharedDtor();
}

void SpecialMeaningAppearanceIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialMeaningAppearanceIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialMeaningAppearanceIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialMeaningAppearanceIds_descriptor_;
}

const SpecialMeaningAppearanceIds& SpecialMeaningAppearanceIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_appearances_2eproto();
  return *default_instance_;
}

SpecialMeaningAppearanceIds* SpecialMeaningAppearanceIds::default_instance_ = NULL;

SpecialMeaningAppearanceIds* SpecialMeaningAppearanceIds::New() const {
  return new SpecialMeaningAppearanceIds;
}

void SpecialMeaningAppearanceIds::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialMeaningAppearanceIds*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gold_coin_id_, supply_stash_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialMeaningAppearanceIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gold_coin_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_coin_id_)));
          set_has_gold_coin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platinum_coin_id;
        break;
      }

      // optional uint32 platinum_coin_id = 2;
      case 2: {
        if (tag == 16) {
         parse_platinum_coin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platinum_coin_id_)));
          set_has_platinum_coin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crystal_coin_id;
        break;
      }

      // optional uint32 crystal_coin_id = 3;
      case 3: {
        if (tag == 24) {
         parse_crystal_coin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_coin_id_)));
          set_has_crystal_coin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tibia_coin_id;
        break;
      }

      // optional uint32 tibia_coin_id = 4;
      case 4: {
        if (tag == 32) {
         parse_tibia_coin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tibia_coin_id_)));
          set_has_tibia_coin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stamped_letter_id;
        break;
      }

      // optional uint32 stamped_letter_id = 5;
      case 5: {
        if (tag == 40) {
         parse_stamped_letter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamped_letter_id_)));
          set_has_stamped_letter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_supply_stash_id;
        break;
      }

      // optional uint32 supply_stash_id = 6;
      case 6: {
        if (tag == 48) {
         parse_supply_stash_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supply_stash_id_)));
          set_has_supply_stash_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  return false;
#undef DO_
}

void SpecialMeaningAppearanceIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  // optional uint32 gold_coin_id = 1;
  if (has_gold_coin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold_coin_id(), output);
  }

  // optional uint32 platinum_coin_id = 2;
  if (has_platinum_coin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platinum_coin_id(), output);
  }

  // optional uint32 crystal_coin_id = 3;
  if (has_crystal_coin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crystal_coin_id(), output);
  }

  // optional uint32 tibia_coin_id = 4;
  if (has_tibia_coin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tibia_coin_id(), output);
  }

  // optional uint32 stamped_letter_id = 5;
  if (has_stamped_letter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stamped_letter_id(), output);
  }

  // optional uint32 supply_stash_id = 6;
  if (has_supply_stash_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->supply_stash_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
}

::google::protobuf::uint8* SpecialMeaningAppearanceIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  // optional uint32 gold_coin_id = 1;
  if (has_gold_coin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gold_coin_id(), target);
  }

  // optional uint32 platinum_coin_id = 2;
  if (has_platinum_coin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platinum_coin_id(), target);
  }

  // optional uint32 crystal_coin_id = 3;
  if (has_crystal_coin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crystal_coin_id(), target);
  }

  // optional uint32 tibia_coin_id = 4;
  if (has_tibia_coin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tibia_coin_id(), target);
  }

  // optional uint32 stamped_letter_id = 5;
  if (has_stamped_letter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stamped_letter_id(), target);
  }

  // optional uint32 supply_stash_id = 6;
  if (has_supply_stash_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->supply_stash_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.appearances.SpecialMeaningAppearanceIds)
  return target;
}

int SpecialMeaningAppearanceIds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gold_coin_id = 1;
    if (has_gold_coin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_coin_id());
    }

    // optional uint32 platinum_coin_id = 2;
    if (has_platinum_coin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platinum_coin_id());
    }

    // optional uint32 crystal_coin_id = 3;
    if (has_crystal_coin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal_coin_id());
    }

    // optional uint32 tibia_coin_id = 4;
    if (has_tibia_coin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tibia_coin_id());
    }

    // optional uint32 stamped_letter_id = 5;
    if (has_stamped_letter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamped_letter_id());
    }

    // optional uint32 supply_stash_id = 6;
    if (has_supply_stash_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supply_stash_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialMeaningAppearanceIds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialMeaningAppearanceIds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialMeaningAppearanceIds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialMeaningAppearanceIds::MergeFrom(const SpecialMeaningAppearanceIds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold_coin_id()) {
      set_gold_coin_id(from.gold_coin_id());
    }
    if (from.has_platinum_coin_id()) {
      set_platinum_coin_id(from.platinum_coin_id());
    }
    if (from.has_crystal_coin_id()) {
      set_crystal_coin_id(from.crystal_coin_id());
    }
    if (from.has_tibia_coin_id()) {
      set_tibia_coin_id(from.tibia_coin_id());
    }
    if (from.has_stamped_letter_id()) {
      set_stamped_letter_id(from.stamped_letter_id());
    }
    if (from.has_supply_stash_id()) {
      set_supply_stash_id(from.supply_stash_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialMeaningAppearanceIds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialMeaningAppearanceIds::CopyFrom(const SpecialMeaningAppearanceIds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialMeaningAppearanceIds::IsInitialized() const {

  return true;
}

void SpecialMeaningAppearanceIds::Swap(SpecialMeaningAppearanceIds* other) {
  if (other != this) {
    std::swap(gold_coin_id_, other->gold_coin_id_);
    std::swap(platinum_coin_id_, other->platinum_coin_id_);
    std::swap(crystal_coin_id_, other->crystal_coin_id_);
    std::swap(tibia_coin_id_, other->tibia_coin_id_);
    std::swap(stamped_letter_id_, other->stamped_letter_id_);
    std::swap(supply_stash_id_, other->supply_stash_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialMeaningAppearanceIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialMeaningAppearanceIds_descriptor_;
  metadata.reflection = SpecialMeaningAppearanceIds_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace appearances
}  // namespace protobuf
}  // namespace tibia

// @@protoc_insertion_point(global_scope)
